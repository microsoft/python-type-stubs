from typing import Any, Optional

from faker.utils.datetime_safe import date as date
from faker.utils.datetime_safe import datetime as datetime
from faker.utils.datetime_safe import real_date as real_date
from faker.utils.datetime_safe import real_datetime as real_datetime

from .. import BaseProvider as BaseProvider

localized: bool

def datetime_to_timestamp(dt: Any): ...
def timestamp_to_datetime(timestamp: Any, tzinfo: Any): ...
def change_year(current_date: Any, year_diff: Any): ...

class ParseError(ValueError): ...

timedelta_pattern: str

class Provider(BaseProvider):
    centuries: Any = ...
    countries: Any = ...
    regex: Any = ...
    def unix_time(
        self, end_datetime: Optional[Any] = ..., start_datetime: Optional[Any] = ...
    ): ...
    def time_delta(self, end_datetime: Optional[Any] = ...): ...
    def date_time(
        self, tzinfo: Optional[Any] = ..., end_datetime: Optional[Any] = ...
    ): ...
    def date_time_ad(
        self,
        tzinfo: Optional[Any] = ...,
        end_datetime: Optional[Any] = ...,
        start_datetime: Optional[Any] = ...,
    ): ...
    def iso8601(
        self, tzinfo: Optional[Any] = ..., end_datetime: Optional[Any] = ...
    ): ...
    def date(self, pattern: str = ..., end_datetime: Optional[Any] = ...): ...
    def date_object(self, end_datetime: Optional[Any] = ...): ...
    def time(self, pattern: str = ..., end_datetime: Optional[Any] = ...): ...
    def time_object(self, end_datetime: Optional[Any] = ...): ...
    def date_time_between(
        self, start_date: str = ..., end_date: str = ..., tzinfo: Optional[Any] = ...
    ): ...
    def date_between(self, start_date: str = ..., end_date: str = ...): ...
    def future_datetime(self, end_date: str = ..., tzinfo: Optional[Any] = ...): ...
    def future_date(self, end_date: str = ..., tzinfo: Optional[Any] = ...): ...
    def past_datetime(self, start_date: str = ..., tzinfo: Optional[Any] = ...): ...
    def past_date(self, start_date: str = ..., tzinfo: Optional[Any] = ...): ...
    def date_time_between_dates(
        self,
        datetime_start: Optional[Any] = ...,
        datetime_end: Optional[Any] = ...,
        tzinfo: Optional[Any] = ...,
    ): ...
    def date_between_dates(
        self, date_start: Optional[Any] = ..., date_end: Optional[Any] = ...
    ): ...
    def date_time_this_century(
        self, before_now: bool = ..., after_now: bool = ..., tzinfo: Optional[Any] = ...
    ): ...
    def date_time_this_decade(
        self, before_now: bool = ..., after_now: bool = ..., tzinfo: Optional[Any] = ...
    ): ...
    def date_time_this_year(
        self, before_now: bool = ..., after_now: bool = ..., tzinfo: Optional[Any] = ...
    ): ...
    def date_time_this_month(
        self, before_now: bool = ..., after_now: bool = ..., tzinfo: Optional[Any] = ...
    ): ...
    def date_this_century(self, before_today: bool = ..., after_today: bool = ...): ...
    def date_this_decade(self, before_today: bool = ..., after_today: bool = ...): ...
    def date_this_year(self, before_today: bool = ..., after_today: bool = ...): ...
    def date_this_month(self, before_today: bool = ..., after_today: bool = ...): ...
    def time_series(
        self,
        start_date: str = ...,
        end_date: str = ...,
        precision: Optional[Any] = ...,
        distrib: Optional[Any] = ...,
        tzinfo: Optional[Any] = ...,
    ): ...
    def am_pm(self): ...
    def day_of_month(self): ...
    def day_of_week(self): ...
    def month(self): ...
    def month_name(self): ...
    def year(self): ...
    def century(self): ...
    def timezone(self): ...
    def pytimezone(self, *args: Any, **kwargs: Any): ...
    def date_of_birth(
        self,
        tzinfo: Optional[Any] = ...,
        minimum_age: int = ...,
        maximum_age: int = ...,
    ): ...
