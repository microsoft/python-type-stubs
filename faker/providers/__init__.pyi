from typing import Any, Optional

from faker.utils.distribution import choices_distribution as choices_distribution
from faker.utils.distribution import (
    choices_distribution_unique as choices_distribution_unique,
)

class BaseProvider:
    __provider__: str = ...
    __lang__: Any = ...
    language_locale_codes: Any = ...
    generator: Any = ...
    def __init__(self, generator: Any) -> None: ...
    def locale(self): ...
    def language_code(self): ...
    def random_int(self, min: int = ..., max: int = ..., step: int = ...): ...
    def random_digit(self): ...
    def random_digit_not_null(self): ...
    def random_digit_or_empty(self): ...
    def random_digit_not_null_or_empty(self): ...
    def random_number(self, digits: Optional[Any] = ..., fix_len: bool = ...): ...
    def random_letter(self): ...
    def random_letters(self, length: int = ...): ...
    def random_lowercase_letter(self): ...
    def random_uppercase_letter(self): ...
    def random_elements(
        self, elements: Any = ..., length: Optional[Any] = ..., unique: bool = ...
    ): ...
    def random_choices(self, elements: Any = ..., length: Optional[Any] = ...): ...
    def random_element(self, elements: Any = ...): ...
    def random_sample(self, elements: Any = ..., length: Optional[Any] = ...): ...
    def randomize_nb_elements(
        self,
        number: int = ...,
        le: bool = ...,
        ge: bool = ...,
        min: Optional[Any] = ...,
        max: Optional[Any] = ...,
    ): ...
    def numerify(self, text: str = ...): ...
    def lexify(self, text: str = ..., letters: Any = ...): ...
    def bothify(self, text: str = ..., letters: Any = ...): ...
    def hexify(self, text: str = ..., upper: bool = ...): ...
