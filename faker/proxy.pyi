# pyright: strict

from faker.config import DEFAULT_LOCALE as DEFAULT_LOCALE
from faker.factory import Factory as Factory
from faker.generator import Generator as Generator
from faker.utils.distribution import choices_distribution as choices_distribution
from random import Random
from typing import (
    Any,
    AnyStr,
    NoReturn,
    Optional,
    OrderedDict,
    Pattern,
    Sequence,
    Tuple,
    Union,
)

class Faker:
    cache_pattern: Pattern[AnyStr] = ...
    generator_attrs: Sequence[str] = ...
    def __init__(
        self,
        locale: Optional[Union[str, Sequence[str], OrderedDict[str, float]]] = ...,
        providers: Optional[Sequence[str]] = ...,
        generator: Optional[Sequence[Generator]] = ...,
        includes: Optional[Sequence[str]] = ...,
        **config: Any
    ) -> None: ...
    def __dir__(self) -> Sequence[str]: ...
    def __getitem__(self, locale: str) -> Any: ...
    def __getattribute__(self, attr: str) -> Any: ...
    def __getattr__(self, attr: str) -> Any: ...
    @classmethod
    def seed(cls, seed: Optional[Any] = ...) -> NoReturn: ...
    def seed_instance(self, seed: Optional[Any] = ...) -> NoReturn: ...
    def seed_locale(self, locale: str, seed: Optional[Any] = ...) -> NoReturn: ...
    @property
    def random(self) -> Random: ...
    @random.setter
    def random(self, value: Random) -> NoReturn: ...
    @property
    def locales(self) -> Sequence[str]: ...
    @property
    def weights(self) -> Sequence[float]: ...
    @property
    def factories(self) -> Sequence[Generator]: ...
    def items(self) -> Sequence[Tuple[str, Generator]]: ...

