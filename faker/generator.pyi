from random import Random
from typing import Any, Callable, none, Optional, Sequence, Union

from faker.providers import BaseProvider

random: Random
mod_random: Random

class Generator:
    providers: Sequence[BaseProvider] = ...
    def __init__(self, **config: Any) -> None: ...
    def add_provider(self, provider: BaseProvider) -> None: ...
    def provider(self, name: str) -> Union[BaseProvider, None]: ...
    def get_providers(self) -> Sequence[BaseProvider]: ...
    @property
    def random(self) -> Random: ...
    @random.setter
    def random(self, value: Random) -> None: ...
    def seed_instance(self, seed: Optional[Any] = ...) -> None: ...
    @classmethod
    def seed(cls, seed: Optional[Any] = ...) -> None: ...
    def format(self, formatter: str, *args: Any, **kwargs: Any) -> str: ...
    def get_formatter(self, formatter: str) -> Callable[..., str]: ...
    def set_formatter(self, name: str, method: Callable[..., str]) -> None: ...
    def parse(self, text: str) -> str: ...

