import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.gridspec import SubplotSpec
from matplotlib.backend_bases import RendererBase
from matplotlib.figure import Figure
from matplotlib.axes import Axes, SubplotBase

"""
This type stub file was generated by pyright.
"""

from . import _api

"""
This type stub file was generated by pyright.
"""

def auto_adjust_subplotpars(
    fig,
    renderer,
    nrows_ncols: tuple[int, int],
    num1num2_list: Sequence[tuple[int, int]],
    subplot_list: Sequence[SubplotBase],
    ax_bbox_list=...,
    pad: float = ...,
    h_pad: float = ...,
    w_pad: float = ...,
    rect: tuple[float, float, float, float] = ...,
):
    """
    Return a dict of subplot parameters to adjust spacing between subplots
    or ``None`` if resulting axes would have zero height or width.

    Note that this function ignores geometry information of subplot
    itself, but uses what is given by the *nrows_ncols* and *num1num2_list*
    parameters.  Also, the results could be incorrect if some subplots have
    ``adjustable=datalim``.

    Parameters
    ----------
    nrows_ncols : tuple[int, int]
        Number of rows and number of columns of the grid.
    num1num2_list : list[tuple[int, int]]
        List of numbers specifying the area occupied by the subplot
    subplot_list : list of subplots
        List of subplots that will be used to calculate optimal subplot_params.
    pad : float
        Padding between the figure edge and the edges of subplots, as a
        fraction of the font size.
    h_pad, w_pad : float
        Padding (height/width) between edges of adjacent subplots, as a
        fraction of the font size.  Defaults to *pad*.
    rect : tuple[float, float, float, float]
        [left, bottom, right, top] in normalized (0, 1) figure coordinates.
    """
    ...

def get_subplotspec_list(axes_list, grid_spec=...):
    """
    Return a list of subplotspec from the given list of axes.

    For an instance of axes that does not support subplotspec, None is inserted
    in the list.

    If grid_spec is given, None is inserted for those not from the given
    grid_spec.
    """
    ...

def get_tight_layout_figure(
    fig: Figure,
    axes_list: list[Axes],
    subplotspec_list: list,
    renderer: RendererBase,
    pad: float = ...,
    h_pad: float = ...,
    w_pad: float = ...,
    rect: tuple[float, float, float, float] = ...,
) -> tuple[SubplotSpec, None]:
    """
    Return subplot parameters for tight-layouted-figure with specified padding.

    Parameters
    ----------
    fig : Figure
    axes_list : list of Axes
    subplotspec_list : list of `.SubplotSpec`
        The subplotspecs of each axes.
    renderer : renderer
    pad : float
        Padding between the figure edge and the edges of subplots, as a
        fraction of the font size.
    h_pad, w_pad : float
        Padding (height/width) between edges of adjacent subplots.  Defaults to
        *pad*.
    rect : tuple[float, float, float, float], optional
        (left, bottom, right, top) rectangle in normalized figure coordinates
        that the whole subplots area (including labels) will fit into.
        Defaults to using the entire figure.

    Returns
    -------
    subplotspec or None
        subplotspec kwargs to be passed to `.Figure.subplots_adjust` or
        None if tight_layout could not be accomplished.
    """
    ...
