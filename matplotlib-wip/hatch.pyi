import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.path import Path

"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""

class HatchPatternBase:
    """The base class for a hatch pattern."""

    ...

class HorizontalHatch(HatchPatternBase):
    def __init__(self, hatch: str, density: int) -> None: ...
    def set_vertices_and_codes(self, vertices, codes): ...

class VerticalHatch(HatchPatternBase):
    def __init__(self, hatch: str, density: int) -> None: ...
    def set_vertices_and_codes(self, vertices, codes): ...

class NorthEastHatch(HatchPatternBase):
    def __init__(self, hatch: str, density: int) -> None: ...
    def set_vertices_and_codes(self, vertices, codes): ...

class SouthEastHatch(HatchPatternBase):
    def __init__(self, hatch: str, density: int) -> None: ...
    def set_vertices_and_codes(self, vertices, codes): ...

class Shapes(HatchPatternBase):
    filled = ...
    def __init__(self, hatch: str, density: int) -> None: ...
    def set_vertices_and_codes(self, vertices, codes): ...

class Circles(Shapes):
    def __init__(self, hatch: str, density: int) -> None: ...

class SmallCircles(Circles):
    size = ...
    def __init__(self, hatch: str, density: int) -> None: ...

class LargeCircles(Circles):
    size = ...
    def __init__(self, hatch: str, density: int) -> None: ...

class SmallFilledCircles(Circles):
    size = ...
    filled = ...
    def __init__(self, hatch: str, density: int) -> None: ...

class Stars(Shapes):
    size = ...
    filled = ...
    def __init__(self, hatch: str, density: int) -> None: ...

def get_path(hatchpattern, density=...):
    """
    Given a hatch specifier, *hatchpattern*, generates Path to render
    the hatch in a unit square.  *density* is the number of lines per
    unit square.
    """
    ...
