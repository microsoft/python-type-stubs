from sre_parse import State
from matplotlib.mathtext import MathtextBackend
from typing import Literal
from .font_manager import FontProperties
import enum
import functools

def get_unicode_index(symbol: str, math: bool = ...) -> int: ...

class Fonts:
    def __init__(
        self, default_font_prop: FontProperties, mathtext_backend: MathtextBackend
    ) -> None: ...
    def get_kern(
        self,
        font1,
        fontclass1,
        sym1,
        fontsize1,
        font2,
        fontclass2,
        sym2,
        fontsize2,
        dpi,
    ): ...
    def get_metrics(
        self, font: str, font_class: str, sym: str, fontsize: float, dpi: float
    ) -> object: ...
    def render_glyph(self, ox, oy, font, font_class, sym, fontsize, dpi): ...
    def render_rect_filled(self, x1, y1, x2, y2): ...
    def get_xheight(self, font, fontsize, dpi): ...
    def get_underline_thickness(self, font, fontsize, dpi): ...
    def get_used_characters(self): ...
    def get_sized_alternatives_for_symbol(self, fontname, sym): ...

class TruetypeFonts(Fonts):
    def __init__(self, default_font_prop, mathtext_backend) -> None: ...
    def get_xheight(self, fontname, fontsize, dpi): ...
    def get_underline_thickness(self, font, fontsize, dpi): ...
    def get_kern(
        self,
        font1,
        fontclass1,
        sym1,
        fontsize1,
        font2,
        fontclass2,
        sym2,
        fontsize2,
        dpi,
    ): ...

class BakomaFonts(TruetypeFonts):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_sized_alternatives_for_symbol(self, fontname, sym): ...

class UnicodeFonts(TruetypeFonts):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_sized_alternatives_for_symbol(self, fontname, sym): ...

class DejaVuFonts(UnicodeFonts):
    def __init__(self, *args, **kwargs) -> None: ...

class DejaVuSerifFonts(DejaVuFonts): ...
class DejaVuSansFonts(DejaVuFonts): ...

class StixFonts(UnicodeFonts):
    def __init__(self, *args, **kwargs) -> None: ...
    @functools.lru_cache()
    def get_sized_alternatives_for_symbol(self, fontname, sym): ...

class StixSansFonts(StixFonts): ...

SHRINK_FACTOR = ...
NUM_SIZE_LEVELS = ...

class FontConstantsBase:

    script_space = ...
    subdrop = ...
    sup1 = ...
    sub1 = ...
    sub2 = ...
    delta = ...
    delta_slanted = ...
    delta_integral = ...

class ComputerModernFontConstants(FontConstantsBase):
    script_space = ...
    subdrop = ...
    sup1 = ...
    sub1 = ...
    sub2 = ...
    delta = ...
    delta_slanted = ...
    delta_integral = ...

class STIXFontConstants(FontConstantsBase):
    script_space = ...
    sup1 = ...
    sub2 = ...
    delta = ...
    delta_slanted = ...
    delta_integral = ...

class STIXSansFontConstants(FontConstantsBase):
    script_space = ...
    sup1 = ...
    delta_slanted = ...
    delta_integral = ...

class DejaVuSerifFontConstants(FontConstantsBase): ...
class DejaVuSansFontConstants(FontConstantsBase): ...

class Node:
    def __init__(self) -> None: ...
    def __repr__(self): ...
    def get_kerning(self, next): ...
    def shrink(self): ...
    def render(self, x, y): ...

class Box(Node):
    def __init__(self, width, height, depth) -> None: ...
    def shrink(self): ...
    def render(self, x1, y1, x2, y2): ...

class Vbox(Box):
    def __init__(self, height, depth) -> None: ...

class Hbox(Box):
    def __init__(self, width) -> None: ...

class Char(Node):
    def __init__(self, c, state) -> None: ...
    def __repr__(self): ...
    def is_slanted(self): ...
    def get_kerning(self, next): ...
    def render(self, x, y): ...
    def shrink(self): ...

class Accent(Char):
    def shrink(self): ...
    def render(self, x, y): ...

class List(Box):
    def __init__(self, elements) -> None: ...
    def __repr__(self): ...
    def shrink(self): ...

class Hlist(List):
    def __init__(self, elements, w=..., m=..., do_kern=...) -> None: ...
    def kern(self): ...
    def hpack(self, w: float = ..., m: Literal["exactly", "additional"] = ...): ...

class Vlist(List):
    def __init__(self, elements, h=..., m=...) -> None: ...
    def vpack(
        self, h: float = ..., m: Literal["exactly", "additional"] = ..., l: float = ...
    ): ...

class Rule(Box):
    def __init__(self, width, height, depth, state) -> None: ...
    def render(self, x, y, w, h): ...

class Hrule(Rule):
    def __init__(self, state, thickness=...) -> None: ...

class Vrule(Rule):
    def __init__(self, state) -> None: ...

class Glue(Node):
    def __init__(self, glue_type) -> None: ...
    def shrink(self): ...

class HCentered(Hlist):
    def __init__(self, elements) -> None: ...

class VCentered(Vlist):
    def __init__(self, elements) -> None: ...

class Kern(Node):

    height = ...
    depth = ...
    def __init__(self, width) -> None: ...
    def __repr__(self): ...
    def shrink(self): ...

class AutoHeightChar(Hlist):
    def __init__(self, c, height, depth, state, always=..., factor=...) -> None: ...

class AutoWidthChar(Hlist):
    def __init__(self, c, width, state, always=..., char_class=...) -> None: ...

def ship(ox, oy, box): ...
def Error(msg): ...

class ParserState:
    def __init__(self, font_output, font, font_class, fontsize, dpi) -> None: ...
    def copy(self): ...
    @property
    def font(self): ...
    @font.setter
    def font(self, name): ...
    def get_current_underline_thickness(self): ...

def cmd(expr, args): ...

class Parser:
    class _MathStyle(enum.Enum):
        DISPLAYSTYLE = ...
        TEXTSTYLE = ...
        SCRIPTSTYLE = ...
        SCRIPTSCRIPTSTYLE = ...
    def __init__(self) -> None: ...
    def parse(self, s, fonts_object, fontsize, dpi): ...
    def get_state(self) -> State: ...
    def pop_state(self) -> State: ...
    def push_state(self): ...
    def main(self, s, loc, toks): ...
    def math_string(self, s, loc, toks): ...
    def math(self, s, loc, toks): ...
    def non_math(self, s, loc, toks): ...

    float_literal = ...

    def space(self, s, loc, toks): ...
    def customspace(self, s, loc, toks): ...
    def symbol(self, s, loc, toks): ...

    accentprefixed = ...
    def unknown_symbol(self, s, loc, toks): ...
    def accent(self, s, loc, toks): ...
    def function(self, s, loc, toks): ...
    def operatorname(self, s, loc, toks): ...
    def start_group(self, s, loc, toks): ...
    def group(self, s, loc, toks): ...
    def required_group(self, s, loc, toks): ...

    optional_group = ...
    def end_group(self, s, loc, toks): ...
    def font(self, s, loc, toks): ...
    def is_overunder(self, nucleus): ...
    def is_dropsub(self, nucleus): ...
    def is_slanted(self, nucleus): ...
    def is_between_brackets(self, s, loc): ...
    def subsuper(self, s, loc, toks): ...
    def style_literal(self, s, loc, toks): ...
    def genfrac(self, s, loc, toks): ...
    def frac(self, s, loc, toks): ...
    def dfrac(self, s, loc, toks): ...
    def binom(self, s, loc, toks): ...

    overset = ...
    def sqrt(self, s, loc, toks): ...
    def overline(self, s, loc, toks): ...
    def auto_delim(self, s, loc, toks): ...
