import numpy as np
from typing import Callable, Literal
from matplotlib._typing import *
from matplotlib.transforms import Transform
from matplotlib.cm import ScalarMappable
from matplotlib.backend_bases import MouseEvent
from matplotlib._enums import CapStyle, JoinStyle
from matplotlib.artist import Artist, allow_rasterization

class Collection(Artist, ScalarMappable):
    _transforms = np.empty((0, 3, 3))

    def __init__(
        self,
        edgecolors=...,
        facecolors=...,
        linewidths=...,
        linestyles=...,
        capstyle=...,
        joinstyle=...,
        antialiaseds=...,
        offsets=...,
        offset_transform=...,
        norm=...,
        cmap=...,
        pickradius=...,
        hatch=...,
        urls=...,
        *,
        zorder=...,
        **kwargs
    ) -> None: ...
    def get_paths(self): ...
    def set_paths(self): ...
    def get_transforms(self): ...
    def get_offset_transform(self): ...
    def set_offset_transform(self, offset_transform: Transform): ...
    def get_datalim(self, transData): ...
    def get_window_extent(self, renderer=...): ...
    @allow_rasterization
    def draw(self, renderer): ...
    def set_pickradius(self, pr: float): ...
    def get_pickradius(self): ...
    def contains(self, mouseevent): ...
    def set_urls(self, urls: list[str] | None): ...
    def get_urls(self): ...
    def set_hatch(
        self, hatch: Literal["/", "\\", "|", "-", "+", "x", "o", "O", ".", "*"]
    ): ...
    def get_hatch(self): ...
    def set_offsets(self, offsets: ArrayLike): ...
    def get_offsets(self) -> ArrayLike: ...
    def set_linewidth(self, lw: float | list[float]): ...
    def set_linestyle(self, ls: str | tuple): ...
    def set_capstyle(self, cs: CapStyle | Literal["butt", "projecting", "round"]): ...
    def get_capstyle(self): ...
    def set_joinstyle(self, js: JoinStyle | Literal["miter", "round", "bevel"]): ...
    def get_joinstyle(self): ...
    def set_antialiased(self, aa: bool | list[bool]): ...
    def set_color(self, c: Color | list): ...
    def set_facecolor(self, c: Color | list[Color]): ...
    def set_facecolors(self, c: Color | list[Color]): ...
    def get_facecolor(self) -> Color | list[Color]: ...
    def get_edgecolor(self) -> Color | list[Color]: ...
    def get_facecolors(self) -> Color | list[Color]: ...
    def get_edgecolors(self) -> Color | list[Color]: ...
    def set_edgecolor(self, c: Color | list[Color] | Literal["face"]): ...
    def set_edgecolors(self, c: Color | list[Color] | Literal["face"]): ...
    def set_alpha(self, alpha: ArrayLike | Scalar | None): ...
    def get_linewidth(self): ...
    def get_linestyle(self): ...
    def update_scalarmappable(self): ...
    def get_fill(self): ...
    def update_from(self, other): ...

class _CollectionWithSizes(Collection):
    def get_sizes(self) -> list: ...
    def set_sizes(self, sizes: np.ndarray | None, dpi: float = ...): ...
    @allow_rasterization
    def draw(self, renderer): ...

class PathCollection(_CollectionWithSizes):
    def __init__(self, paths, sizes=..., **kwargs) -> None: ...
    def set_paths(self, paths): ...
    def get_paths(self): ...
    def legend_elements(
        self,
        prop: Literal["colors", "sizes"] = ...,
        num=...,
        fmt=...,
        func: Callable = ...,
        **kwargs
    ): ...

class PolyCollection(_CollectionWithSizes):
    def __init__(self, verts, sizes=..., closed=..., **kwargs) -> None: ...
    def set_verts(self, verts: list[ArrayLike], closed: bool = ...): ...
    set_paths = ...
    def set_verts_and_codes(self, verts, codes): ...

class BrokenBarHCollection(PolyCollection):
    def __init__(self, xranges, yrange, **kwargs) -> None: ...
    @classmethod
    def span_where(cls, x, ymin, ymax, where, **kwargs): ...

class RegularPolyCollection(_CollectionWithSizes):

    _factor = np.pi ** (-1 / 2)

    def __init__(self, numsides, rotation=..., sizes=..., **kwargs) -> None: ...
    def get_numsides(self): ...
    def get_rotation(self): ...
    @allow_rasterization
    def draw(self, renderer): ...

class StarPolygonCollection(RegularPolyCollection): ...
class AsteriskPolygonCollection(RegularPolyCollection): ...

class LineCollection(Collection):
    def __init__(self, segments, *, zorder=..., **kwargs) -> None: ...
    def set_segments(self, segments): ...

    set_verts = ...
    set_paths = ...
    def get_segments(self) -> list: ...
    def set_color(self, c: Color | list[Color]): ...
    set_colors = ...
    def get_color(self): ...

    get_colors = ...

class EventCollection(LineCollection):
    def __init__(
        self,
        positions,
        orientation=...,
        lineoffset=...,
        linelength=...,
        linewidth=...,
        color: Color = ...,
        linestyle=...,
        antialiased=...,
        **kwargs
    ) -> None: ...
    def get_positions(self): ...
    def set_positions(self, positions): ...
    def add_positions(self, position): ...
    extend_positions = ...
    def is_horizontal(self): ...
    def get_orientation(self): ...
    def switch_orientation(self): ...
    def set_orientation(self, orientation: Literal["horizontal", "vertical"]): ...
    def get_linelength(self): ...
    def set_linelength(self, linelength): ...
    def get_lineoffset(self): ...
    def set_lineoffset(self, lineoffset): ...
    def get_linewidth(self): ...
    def get_linewidths(self): ...
    def get_color(self): ...

class CircleCollection(_CollectionWithSizes):

    _factor = np.pi ** (-1 / 2)
    def __init__(self, sizes, **kwargs) -> None: ...

class EllipseCollection(Collection):
    def __init__(self, widths, heights, angles, units=..., **kwargs) -> None: ...
    @allow_rasterization
    def draw(self, renderer): ...

class PatchCollection(Collection):
    def __init__(self, patches, match_original=..., **kwargs) -> None: ...
    def set_paths(self, patches): ...

class TriMesh(Collection):
    def __init__(self, triangulation, **kwargs) -> None: ...
    def get_paths(self): ...
    def set_paths(self): ...
    @staticmethod
    def convert_mesh_to_paths(tri): ...
    @allow_rasterization
    def draw(self, renderer): ...

class QuadMesh(Collection):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_paths(self): ...
    def set_paths(self): ...
    def set_array(self, A): ...
    def get_datalim(self, transData): ...
    def get_coordinates(self): ...
    @staticmethod
    def convert_mesh_to_paths(meshWidth, meshHeight, coordinates): ...
    def convert_mesh_to_triangles(self, meshWidth, meshHeight, coordinates): ...
    @allow_rasterization
    def draw(self, renderer): ...
    def get_cursor_data(self, event: MouseEvent): ...
