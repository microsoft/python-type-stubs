import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib._afm import AFM

"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""

CharMetrics = ...
CompositePart = ...

class AFM:
    def __init__(self, fh) -> None:
        """Parse the AFM file in file object *fh*."""
        ...
    def get_bbox_char(self, c, isord=...): ...
    def string_width_height(self, s):
        """
        Return the string width (including kerning) and string height
        as a (*w*, *h*) tuple.
        """
        ...
    def get_str_bbox_and_descent(self, s):
        """Return the string bounding box and the maximal descent."""
        ...
    def get_str_bbox(self, s):
        """Return the string bounding box."""
        ...
    def get_name_char(self, c, isord=...):
        """Get the name of the character, i.e., ';' is 'semicolon'."""
        ...
    def get_width_char(self, c, isord=...):
        """
        Get the width of the character from the character metric WX field.
        """
        ...
    def get_width_from_char_name(self, name):
        """Get the width of the character from a type1 character name."""
        ...
    def get_height_char(self, c, isord=...):
        """Get the bounding box (ink) height of character *c* (space is 0)."""
        ...
    def get_kern_dist(self, c1, c2):
        """
        Return the kerning pair distance (possibly 0) for chars *c1* and *c2*.
        """
        ...
    def get_kern_dist_from_name(self, name1, name2):
        """
        Return the kerning pair distance (possibly 0) for chars
        *name1* and *name2*.
        """
        ...
    def get_fontname(self):
        """Return the font name, e.g., 'Times-Roman'."""
        ...
    @property
    def postscript_name(self): ...
    def get_fullname(self):
        """Return the font full name, e.g., 'Times-Roman'."""
        ...
    def get_familyname(self):
        """Return the font family name, e.g., 'Times'."""
        ...
    @property
    def family_name(self):
        """The font family name, e.g., 'Times'."""
        ...
    def get_weight(self):
        """Return the font weight, e.g., 'Bold' or 'Roman'."""
        ...
    def get_angle(self):
        """Return the fontangle as float."""
        ...
    def get_capheight(self):
        """Return the cap height as float."""
        ...
    def get_xheight(self):
        """Return the xheight as float."""
        ...
    def get_underline_thickness(self):
        """Return the underline thickness as float."""
        ...
    def get_horizontal_stem_width(self):
        """
        Return the standard horizontal stem width as float, or *None* if
        not specified in AFM file.
        """
        ...
    def get_vertical_stem_width(self):
        """
        Return the standard vertical stem width as float, or *None* if
        not specified in AFM file.
        """
        ...
