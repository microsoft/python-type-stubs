import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.container import StemContainer
from matplotlib.collections import LineCollection
from matplotlib.lines import Line2D
from matplotlib.container import ErrorbarContainer
from matplotlib.container import BarContainer
from matplotlib.axes import Axes
from matplotlib.artist import Artist

"""
This type stub file was generated by pyright.
"""
from matplotlib.patches import Rectangle
from typing import List, Optional, Type, Union

"""
This type stub file was generated by pyright.
"""

class Container(tuple):
    """
    Base class for containers.

    Containers are classes that collect semantically related Artists such as
    the bars of a bar plot.
    """

    def __repr__(self): ...
    def __new__(
        cls: Type[Container], *args, **kwargs
    ) -> Union[StemContainer, ErrorbarContainer, BarContainer]: ...
    def __init__(self, kl: list[Rectangle], label: str = ...) -> None: ...
    def remove(self): ...
    def get_children(self) -> list[Rectangle]: ...

    get_label = ...
    set_label = ...
    add_callback = ...
    remove_callback = ...
    pchanged = ...

class BarContainer(Container):
    """
    Container for the artists of bar plots (e.g. created by `.Axes.bar`).

    The container can be treated as a tuple of the *patches* themselves.
    Additionally, you can access these and further parameters by the
    attributes.

    Attributes
    ----------
    patches : list of :class:`~matplotlib.patches.Rectangle`
        The artists of the bars.

    errorbar : None or :class:`~ErrorbarContainer`
        A container for the error bar artists if error bars are present.
        *None* otherwise.

    datavalues : None or array-like
        The underlying data values corresponding to the bars.

    orientation : {'vertical', 'horizontal'}, default: None
        If 'vertical', the bars are assumed to be vertical.
        If 'horizontal', the bars are assumed to be horizontal.

    """

    def __init__(
        self,
        patches: list[Rectangle],
        errorbar: Optional[ErrorbarContainer] = ...,
        *,
        datavalues=...,
        orientation=...,
        **kwargs
    ) -> None: ...

class ErrorbarContainer(Container):
    """
    Container for the artists of error bars (e.g. created by `.Axes.errorbar`).

    The container can be treated as the *lines* tuple itself.
    Additionally, you can access these and further parameters by the
    attributes.

    Attributes
    ----------
    lines : tuple
        Tuple of ``(data_line, caplines, barlinecols)``.

        - data_line : :class:`~Line2D` instance of
          x, y plot markers and/or line.
        - caplines : tuple of :class:`~Line2D` instances of
          the error bar caps.
        - barlinecols : list of :class:`~LineCollection`
          with the horizontal and vertical error ranges.

    has_xerr, has_yerr : bool
        ``True`` if the errorbar has x/y errors.

    """

    def __init__(self, lines, has_xerr=..., has_yerr=..., **kwargs) -> None: ...

class StemContainer(Container):
    """
    Container for the artists created in a :meth:`.Axes.stem` plot.

    The container can be treated like a namedtuple ``(markerline, stemlines,
    baseline)``.

    Attributes
    ----------
    markerline :  :class:`~Line2D`
        The artist of the markers at the stem heads.

    stemlines : list of :class:`~Line2D`
        The artists of the vertical lines for all stems.

    baseline : :class:`~Line2D`
        The artist of the horizontal baseline.
    """

    def __init__(self, markerline_stemlines_baseline, **kwargs) -> None:
        """
        Parameters
        ----------
        markerline_stemlines_baseline : tuple
            Tuple of ``(markerline, stemlines, baseline)``.
            ``markerline`` contains the `.LineCollection` of the markers,
            ``stemlines`` is a `.LineCollection` of the main lines,
            ``baseline`` is the `.Line2D` of the baseline.
        """
        ...
