import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.figure import Figure
from matplotlib.backend_bases import _Backend

"""
This type stub file was generated by pyright.
"""
from matplotlib.backend_tools import Cursors

from matplotlib import backend_tools
from matplotlib.backend_bases import (
    FigureManagerBase,
    NavigationToolbar2,
    TimerBase,
    _Backend,
)

"""
This type stub file was generated by pyright.
"""

backend_version = ...

def mpl_to_gtk_cursor_name(mpl_cursor: Cursors) -> str: ...

class TimerGTK(TimerBase):
    """Subclass of `.TimerBase` using GTK timer events."""

    def __init__(self, *args, **kwargs) -> None: ...

class _FigureManagerGTK(FigureManagerBase):
    """
    Attributes
    ----------
    canvas : `FigureCanvas`
        The FigureCanvas instance
    num : int or str
        The Figure number
    toolbar : Gtk.Toolbar or Gtk.Box
        The toolbar
    vbox : Gtk.VBox
        The Gtk.VBox containing the canvas and toolbar
    window : Gtk.Window
        The Gtk.Window
    """

    def __init__(self, canvas, num) -> None: ...
    def destroy(self, *args): ...
    def show(self): ...
    def full_screen_toggle(self): ...
    def get_window_title(self): ...
    def set_window_title(self, title): ...
    def resize(self, width, height): ...

class _NavigationToolbar2GTK(NavigationToolbar2):
    def set_message(self, s): ...
    def draw_rubberband(self, event, x0, y0, x1, y1): ...
    def remove_rubberband(self): ...
    def pan(self, *args): ...
    def zoom(self, *args): ...
    def set_history_buttons(self): ...

class RubberbandGTK(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1): ...
    def remove_rubberband(self): ...

class ConfigureSubplotsGTK(backend_tools.ConfigureSubplotsBase):
    def trigger(self, *args): ...

class _BackendGTK(_Backend):
    @staticmethod
    def mainloop() -> None: ...
