from matplotlib import backend_tools
from matplotlib.backend_bases import FigureCanvasBase, ToolContainerBase
from gi.repository import Gtk
from ._backend_gtk import (
    TimerGTK as TimerGTK3,
    _BackendGTK,
    _FigureManagerGTK,
    _NavigationToolbar2GTK,
)

class __getattr__:
    @property
    def cursord(self): ...

    icon_filename = ...
    window_icon = ...

class FigureCanvasGTK3(Gtk.DrawingArea, FigureCanvasBase):
    required_interactive_framework = ...
    _timer_cls = TimerGTK3
    manager_class = ...
    event_mask = ...
    def __init__(self, figure=...) -> None: ...
    def destroy(self): ...
    def set_cursor(self, cursor): ...
    def scroll_event(self, widget, event): ...
    def button_press_event(self, widget, event): ...
    def button_release_event(self, widget, event): ...
    def key_press_event(self, widget, event): ...
    def key_release_event(self, widget, event): ...
    def motion_notify_event(self, widget, event): ...
    def leave_notify_event(self, widget, event): ...
    def enter_notify_event(self, widget, event): ...
    def size_allocate(self, widget, allocation): ...
    def configure_event(self, widget, event): ...
    def on_draw_event(self, widget, ctx): ...
    def draw(self): ...
    def draw_idle(self): ...
    def flush_events(self): ...

class NavigationToolbar2GTK3(_NavigationToolbar2GTK, Gtk.Toolbar):
    def __init__(self, canvas, window=...) -> None: ...

    win = ...
    def save_figure(self, *args): ...

class ToolbarGTK3(ToolContainerBase, Gtk.Box):
    def __init__(self, toolmanager) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle): ...
    def toggle_toolitem(self, name, toggled): ...
    def remove_toolitem(self, name): ...
    def set_message(self, s): ...

class SaveFigureGTK3(backend_tools.SaveFigureBase):
    def trigger(self, *args, **kwargs): ...

class SetCursorGTK3(backend_tools.SetCursorBase):
    def set_cursor(self, cursor): ...

class HelpGTK3(backend_tools.ToolHelpBase):
    def trigger(self, *args): ...

class ToolCopyToClipboardGTK3(backend_tools.ToolCopyToClipboardBase):
    def trigger(self, *args, **kwargs): ...

def error_msg_gtk(msg, parent=...): ...

Toolbar = ToolbarGTK3

class FigureManagerGTK3(_FigureManagerGTK):
    _toolbar2_class = NavigationToolbar2GTK3
    _toolmanager_toolbar_class = ToolbarGTK3

class _BackendGTK3(_BackendGTK):
    FigureCanvas = FigureCanvasGTK3
    FigureManager = FigureManagerGTK3
