import tkinter as tk
from typing import Sequence
from matplotlib._typing import *
from matplotlib import backend_tools
from matplotlib.backend_bases import (
    FigureCanvasBase,
    FigureManagerBase,
    NavigationToolbar2,
    TimerBase,
    ToolContainerBase,
    _Backend,
)

backend_version = ...
cursord = ...

TK_PHOTO_COMPOSITE_OVERLAY = ...
TK_PHOTO_COMPOSITE_SET = ...

def blit(photoimage, aggimage, offsets: Sequence[int], bbox=...): ...

class TimerTk(TimerBase):
    def __init__(self, parent, *args, **kwargs) -> None: ...

class FigureCanvasTk(FigureCanvasBase):
    required_interactive_framework = ...
    manager_class = ...
    def __init__(self, figure=..., master=...) -> None: ...
    def resize(self, event): ...
    def draw_idle(self): ...
    def get_tk_widget(self):
        """
        Return the Tk widget used to implement FigureCanvasTkAgg.

        Although the initial implementation uses a Tk canvas,  this routine
        is intended to hide that fact.
        """
        ...
    def motion_notify_event(self, event): ...
    def enter_notify_event(self, event): ...
    def button_press_event(self, event, dblclick=...): ...
    def button_dblclick_event(self, event): ...
    def button_release_event(self, event): ...
    def scroll_event(self, event): ...
    def scroll_event_windows(self, event): ...
    def key_press(self, event): ...
    def key_release(self, event): ...
    def new_timer(self, *args, **kwargs): ...
    def flush_events(self): ...
    def start_event_loop(self, timeout=...): ...
    def stop_event_loop(self): ...
    def set_cursor(self, cursor): ...

class FigureManagerTk(FigureManagerBase):

    canvas: FigureCanvasBase
    num: int | str
    toolbar: tk.Toolbar
    window: tk.Window

    def __init__(self, canvas, num, window) -> None: ...
    @classmethod
    def create_with_canvas(cls, canvas_class, figure, num): ...
    def resize(self, width, height): ...
    def show(self): ...
    def destroy(self, *args): ...
    def get_window_title(self): ...
    def set_window_title(self, title): ...
    def full_screen_toggle(self): ...

class NavigationToolbar2Tk(NavigationToolbar2, tk.Frame):
    window: tk.Window = ...
    def __init__(
        self, canvas: FigureCanvasBase, window=..., *, pack_toolbar: bool = True
    ) -> None: ...
    def pan(self, *args): ...
    def zoom(self, *args): ...
    def set_message(self, s): ...
    def draw_rubberband(self, event, x0, y0, x1, y1): ...
    def remove_rubberband(self): ...

    lastrect = ...
    def save_figure(self, *args): ...
    def set_history_buttons(self): ...

class ToolTip:
    @staticmethod
    def createToolTip(widget, text): ...
    def __init__(self, widget) -> None: ...
    def showtip(self, text): ...
    def hidetip(self): ...

class RubberbandTk(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1): ...
    def remove_rubberband(self): ...

    lastrect = ...

class SetCursorTk(backend_tools.SetCursorBase):
    def set_cursor(self, cursor): ...

class ToolbarTk(ToolContainerBase, tk.Frame):
    def __init__(self, toolmanager, window=...) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle): ...
    def toggle_toolitem(self, name, toggled): ...
    def remove_toolitem(self, name): ...
    def set_message(self, s): ...

class SaveFigureTk(backend_tools.SaveFigureBase):
    def trigger(self, *args): ...

class ConfigureSubplotsTk(backend_tools.ConfigureSubplotsBase):
    def trigger(self, *args): ...

class HelpTk(backend_tools.ToolHelpBase):
    def trigger(self, *args): ...

Toolbar = ToolbarTk

class _BackendTk(_Backend):
    FigureManager = FigureManagerTk
    @staticmethod
    def mainloop(): ...
