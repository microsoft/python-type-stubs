import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.backend_bases import RendererBase
from matplotlib.path import Path
from matplotlib.font_manager import FontProperties

"""
This type stub file was generated by pyright.
"""
from matplotlib.font_manager import FontProperties
from typing import Tuple

from ..backend_bases import RendererBase

"""
This type stub file was generated by pyright.
"""

def get_glyphs_subset(fontfile, characters: str):
    """
    Subset a TTF font

    Reads the named fontfile and restricts the font to the characters.
    Returns a serialization of the subset font as file-like object.

    Parameters
    ----------
    symbol : str
        Path to the font file
    characters : str
        Continuous set of characters to include in subset
    """
    ...

class CharacterTracker:
    """
    Helper for font subsetting by the pdf and ps backends.

    Maintains a mapping of font paths to the set of character codepoints that
    are being used from that font.
    """

    def __init__(self) -> None: ...
    def track(self, font, s):
        """Record that string *s* is being typeset using font *font*."""
        ...
    def track_glyph(self, font, glyph):
        """Record that codepoint *glyph* is being typeset using font *font*."""
        ...

class RendererPDFPSBase(RendererBase):
    def __init__(self, width, height) -> None: ...
    def flipy(self) -> bool: ...
    def option_scale_image(self): ...
    def option_image_nocomposite(self) -> bool: ...
    def get_canvas_width_height(self): ...
    def get_text_width_height_descent(
        self, s: str, prop: FontProperties, ismath: bool
    ) -> Tuple[float, float, float]: ...
