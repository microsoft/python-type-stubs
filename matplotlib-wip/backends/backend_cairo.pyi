from matplotlib.backend_bases import (
    FigureCanvasBase,
    FigureManagerBase,
    GraphicsContextBase,
    RendererBase,
    _Backend,
)

backend_version = ...
if __name__ == "cairocffi": ...
else: ...

class RendererCairo(RendererBase):
    def __init__(self, dpi) -> None: ...
    def set_context(self, ctx): ...
    def set_ctx_from_surface(self, surface): ...
    def set_width_height(self, width, height): ...
    def draw_path(self, gc, path, transform, rgbFace=...): ...
    def draw_markers(
        self, gc, marker_path, marker_trans, path, transform, rgbFace=...
    ): ...
    def draw_image(self, gc, x, y, im): ...
    def draw_text(self, gc, x, y, s, prop, angle, ismath=..., mtext=...): ...
    def get_canvas_width_height(self): ...
    def get_text_width_height_descent(self, s, prop, ismath): ...
    def new_gc(self): ...
    def points_to_pixels(self, points): ...

class GraphicsContextCairo(GraphicsContextBase):
    def __init__(self, renderer) -> None: ...
    def restore(self): ...
    def set_alpha(self, alpha): ...
    def set_antialiased(self, b): ...
    def set_capstyle(self, cs): ...
    def set_clip_rectangle(self, rectangle): ...
    def set_clip_path(self, path): ...
    def set_dashes(self, offset, dashes): ...
    def set_foreground(self, fg, isRGBA=...): ...
    def get_rgb(self): ...
    def set_joinstyle(self, js): ...
    def set_linewidth(self, w): ...

class _CairoRegion:
    def __init__(self, slices, data) -> None: ...

class FigureCanvasCairo(FigureCanvasBase):
    def copy_from_bbox(self, bbox): ...
    def restore_region(self, region): ...
    def print_png(self, fobj): ...
    def print_rgba(self, fobj): ...

    print_raw = ...
    print_pdf = ...
    print_ps = ...
    print_svg = ...
    print_svgz = ...

class _BackendCairo(_Backend):
    FigureCanvas = FigureCanvasCairo
    FigureManager = FigureManagerBase
