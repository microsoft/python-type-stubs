from matplotlib.backend_tools import Cursors
from matplotlib import backend_tools
from matplotlib.backend_bases import (
    FigureCanvasBase,
    FigureManagerBase,
    NavigationToolbar2,
    TimerBase,
    ToolContainerBase,
    _Backend,
)
from .qt_compat import QtWidgets

backend_version = ...
SPECIAL_KEYS = ...

cursord = ...

class __getattr__:
    qApp = ...

class TimerQT(TimerBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self): ...

class FigureCanvasQT(QtWidgets.QWidget, FigureCanvasBase):
    required_interactive_framework = ...
    _timer_cls = TimerQT
    manager_class = ...
    buttond = ...

    def __init__(self, figure=...) -> None: ...
    def showEvent(self, event): ...
    def set_cursor(self, cursor: Cursors): ...
    def enterEvent(self, event): ...
    def leaveEvent(self, event): ...
    def mouseEventCoords(self, pos): ...
    def mousePressEvent(self, event): ...
    def mouseDoubleClickEvent(self, event): ...
    def mouseMoveEvent(self, event): ...
    def mouseReleaseEvent(self, event): ...
    def wheelEvent(self, event): ...
    def keyPressEvent(self, event): ...
    def keyReleaseEvent(self, event): ...
    def resizeEvent(self, event): ...
    def sizeHint(self): ...
    def minumumSizeHint(self): ...
    def flush_events(self): ...
    def start_event_loop(self, timeout=...): ...
    def stop_event_loop(self, event=...): ...
    def draw(self): ...
    def draw_idle(self): ...
    def blit(self, bbox=...): ...
    def drawRectangle(self, rect): ...

class MainWindow(QtWidgets.QMainWindow):
    closing = ...
    def closeEvent(self, event): ...

class FigureManagerQT(FigureManagerBase):
    def __init__(self, canvas: FigureCanvasBase, num: int | str) -> None: ...
    def full_screen_toggle(self): ...
    def resize(self, width, height): ...
    def show(self): ...
    def destroy(self, *args): ...
    def get_window_title(self): ...
    def set_window_title(self, title): ...

class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
    message = ...
    toolitems = ...
    def __init__(self, canvas, parent=..., coordinates=...) -> None: ...
    def edit_parameters(self): ...
    def pan(self, *args): ...
    def zoom(self, *args): ...
    def set_message(self, s): ...
    def draw_rubberband(self, event, x0, y0, x1, y1): ...
    def remove_rubberband(self): ...
    def configure_subplots(self): ...
    def save_figure(self, *args): ...
    def set_history_buttons(self): ...

class SubplotToolQt(QtWidgets.QDialog):
    def __init__(self, targetfig, parent) -> None: ...
    def update_from_current_subplotpars(self): ...

class ToolbarQt(ToolContainerBase, QtWidgets.QToolBar):
    def __init__(self, toolmanager, parent=...) -> None: ...
    def add_toolitem(
        self,
        name: str,
        group: str,
        position: int,
        image_file,
        description: str,
        toggle: bool,
    ): ...
    def toggle_toolitem(self, name: str, toggled: bool): ...
    def remove_toolitem(self, name: str): ...
    def set_message(self, s: str): ...

class ConfigureSubplotsQt(backend_tools.ConfigureSubplotsBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def trigger(self, *args): ...

class SaveFigureQt(backend_tools.SaveFigureBase):
    def trigger(self, *args): ...

class SetCursorQt(backend_tools.SetCursorBase):
    def set_cursor(self, cursor): ...

class RubberbandQt(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1): ...
    def remove_rubberband(self): ...

class HelpQt(backend_tools.ToolHelpBase):
    def trigger(self, *args): ...

class ToolCopyToClipboardQT(backend_tools.ToolCopyToClipboardBase):
    def trigger(self, *args, **kwargs): ...

class _BackendQT(_Backend):
    FigureCanvas = FigureCanvasQT
    FigureManager = FigureManagerQT
    @staticmethod
    def mainloop(): ...
