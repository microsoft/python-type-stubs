import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.transforms import Transform
from matplotlib.text import Text
from matplotlib.backend_bases import RendererBase
from matplotlib.backend_bases import GraphicsContextBase
from matplotlib.font_manager import FontProperties
from matplotlib.backend_bases import FigureCanvasBase
from matplotlib.figure import Figure
from matplotlib.backend_bases import _Backend
from matplotlib.transforms import Affine2DBase
from matplotlib.transforms import Affine2D

"""
This type stub file was generated by pyright.
"""

from matplotlib import _api
from matplotlib.backend_bases import (
    FigureCanvasBase,
    FigureManagerBase,
    RendererBase,
    _Backend,
)
from matplotlib.figure import Figure
from matplotlib.font_manager import FontProperties

class __getattr__:
    NO_ESCAPE = ...
    re_mathsep = ...

def get_fontspec():  # -> str:
    """Build fontspec preamble from rc."""
    ...

def get_preamble():
    """Get LaTeX preamble from rc."""
    ...

latex_pt_to_in = ...
latex_in_to_pt = ...
mpl_pt_to_in = ...
mpl_in_to_pt = ...

def common_texification(text): ...
def writeln(fh, line): ...
def make_pdf_to_png_converter():  # -> (pdffile: Unknown, pngfile: Unknown, dpi: Unknown) -> bytes:
    """Return a function that converts a pdf file to a png file."""
    ...

class LatexError(Exception):
    def __init__(self, message, latex_output=...) -> None: ...
    def __str__(self) -> str: ...

class LatexManager:
    """
    The LatexManager opens an instance of the LaTeX application for
    determining the metrics of text elements. The LaTeX environment can be
    modified by setting fonts and/or a custom preamble in `.rcParams`.
    """

    def __init__(self) -> None: ...

    str_cache = ...
    def get_width_height_descent(self, text, prop):  # -> tuple[float, float, float]:
        """
        Get the width, total height, and descent (in TeX points) for a text
        typeset by the current LaTeX environment.
        """
        ...

class RendererPgf(RendererBase):
    def __init__(self, figure: Figure, fh: None) -> None:
        """
        Create a new PGF renderer that translates any drawing instruction
        into text commands to be interpreted in a latex pgfpicture environment.

        Attributes
        ----------
        figure : `Figure`
            Matplotlib figure to initialize height, width and dpi from.
        fh : file-like
            File handle for the output of the drawing commands.
        """
        ...
    def draw_markers(
        self,
        gc: GraphicsContextBase,
        marker_path,
        marker_trans: Transform,
        path,
        trans: Transform,
        rgbFace=...,
    ): ...
    def draw_path(self, gc, path, transform, rgbFace=...): ...
    def option_scale_image(self): ...
    def option_image_nocomposite(self): ...
    def draw_image(
        self,
        gc: GraphicsContextBase,
        x: Scalar,
        y: Scalar,
        im,
        transform: Affine2DBase = ...,
    ): ...
    def draw_tex(self, gc, x, y, s, prop, angle, ismath=..., mtext=...): ...
    def draw_text(
        self,
        gc: GraphicsContextBase,
        x: float,
        y: float,
        s: str,
        prop: FontProperties,
        angle: float,
        ismath=...,
        mtext: Text = ...,
    ): ...
    def get_text_width_height_descent(
        self, s: str, prop: FontProperties, ismath: str
    ): ...
    def flipy(self): ...
    def get_canvas_width_height(self): ...
    def points_to_pixels(self, points: float | ArrayLike): ...

class FigureCanvasPgf(FigureCanvasBase):
    filetypes = ...
    def get_default_filetype(self): ...
    def print_pgf(self, fname_or_fh, **kwargs):  # -> None:
        """
        Output pgf macros for drawing the figure so it can be included and
        rendered in latex documents.
        """
        ...
    def print_pdf(self, fname_or_fh, *, metadata=..., **kwargs):  # -> None:
        """Use LaTeX to compile a pgf generated figure to pdf."""
        ...
    def print_png(self, fname_or_fh, **kwargs):  # -> None:
        """Use LaTeX to compile a pgf figure to pdf and convert it to png."""
        ...
    def get_renderer(self) -> RendererPgf: ...
    def draw(self): ...

FigureManagerPgf = FigureManagerBase

class _BackendPgf(_Backend):
    FigureCanvas = FigureCanvasPgf

class PdfPages:
    """
    A multi-page PDF file using the pgf backend

    Examples
    --------
    >>> import matplotlib.pyplot as plt
    >>> # Initialize:
    >>> with PdfPages('foo.pdf') as pdf:
    ...     # As many times as you like, create a figure fig and save it:
    ...     fig = plt.figure()
    ...     pdf.savefig(fig)
    ...     # When no figure is specified the current figure is saved
    ...     pdf.savefig()
    """

    def __init__(self, filename, *, keep_empty=..., metadata=...) -> None:
        """
        Create a new PdfPages object.

        Parameters
        ----------
        filename : str or path-like
            Plots using `PdfPages.savefig` will be written to a file at this
            location. Any older file with the same name is overwritten.

        keep_empty : bool, default: True
            If set to False, then empty pdf files will be deleted automatically
            when closed.

        metadata : dict, optional
            Information dictionary object (see PDF reference section 10.2.1
            'Document Information Dictionary'), e.g.:
            ``{'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}``.

            The standard keys are 'Title', 'Author', 'Subject', 'Keywords',
            'Creator', 'Producer', 'CreationDate', 'ModDate', and
            'Trapped'. Values have been predefined for 'Creator', 'Producer'
            and 'CreationDate'. They can be removed by setting them to `None`.

            Note that some versions of LaTeX engines may ignore the 'Producer'
            key and set it to themselves.
        """
        ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def close(self):  # -> None:
        """
        Finalize this object, running LaTeX in a temporary directory
        and moving the final pdf file to *filename*.
        """
        ...
    def savefig(self, figure: Figure | int = ..., **kwargs):  # -> None:
        """
        Save a `.Figure` to this file as a new page.

        Any other keyword arguments are passed to `~.Figure.savefig`.

        Parameters
        ----------
        figure : `.Figure` or int, default: the active figure
            The figure, or index of the figure, that is saved to the file.
        """
        ...
    def get_pagecount(self):  # -> int:
        """Return the current number of pages in the multipage pdf file."""
        ...
