import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.transforms import Transform
from matplotlib.text import Text
from matplotlib.backend_bases import GraphicsContextBase
from matplotlib.font_manager import FontProperties
from matplotlib.backend_bases import FigureCanvasBase
from matplotlib.figure import Figure
from matplotlib.backend_bases import _Backend
from matplotlib.transforms import Affine2DBase
from matplotlib.transforms import Affine2D

"""
This type stub file was generated by pyright.
"""
from typing import Tuple, Union

from enum import Enum
from matplotlib import _api
from matplotlib.backend_bases import FigureCanvasBase, _Backend
from . import _backend_pdf_ps

"""
A PostScript backend, which can produce both PostScript .ps and .eps.
"""

backend_version = ...
debugPS = ...

class PsBackendHelper:
    def __init__(self) -> None: ...

ps_backend_helper = ...
papersize = ...

def quote_ps_string(s):  # -> str:
    """
    Quote dangerous characters of S for use in a PostScript string constant.
    """
    ...

class RendererPS(_backend_pdf_ps.RendererPDFPSBase):
    """
    The renderer handles all the drawing primitives using a graphics
    context instance that controls the colors/styles.
    """

    def __init__(self, width, height, pswriter, imagedpi=...) -> None: ...
    def set_color(
        self, r: float, g: float, b: float, store: Union[float, bool] = ...
    ) -> None: ...
    def set_linewidth(self, linewidth: float, store: bool = ...) -> None: ...
    def set_linejoin(self, linejoin: str, store: bool = ...) -> None: ...
    def set_linecap(self, linecap: str, store: bool = ...) -> None: ...
    def set_linedash(self, offset: int, seq: None, store: bool = ...) -> None: ...
    def set_font(self, fontname: str, fontsize: float, store: bool = ...) -> None: ...
    def create_hatch(self, hatch): ...
    def get_image_magnification(self):  # -> float:
        """
        Get the factor by which to magnify images passed to draw_image.
        Allows a backend to have images at a different resolution to other
        artists.
        """
        ...
    def draw_image(
        self,
        gc: GraphicsContextBase,
        x: Scalar,
        y: Scalar,
        im,
        transform: Affine2DBase = ...,
    ): ...
    def draw_path(self, gc, path, transform, rgbFace=...): ...
    def draw_markers(
        self,
        gc: GraphicsContextBase,
        marker_path,
        marker_trans: Transform,
        path,
        trans: Transform,
        rgbFace=...,
    ): ...
    def draw_path_collection(
        self,
        gc,
        master_transform,
        paths,
        all_transforms,
        offsets,
        offsetTrans,
        facecolors,
        edgecolors,
        linewidths,
        linestyles,
        antialiaseds,
        urls,
        offset_position,
    ): ...
    def draw_tex(self, gc, x, y, s, prop, angle, *, mtext=...): ...
    def draw_text(
        self,
        gc: GraphicsContextBase,
        x: float,
        y: float,
        s: str,
        prop: FontProperties,
        angle: float,
        ismath=...,
        mtext: Text = ...,
    ): ...
    def draw_mathtext(self, gc, x, y, s, prop, angle):  # -> None:
        """Draw the math text using matplotlib.mathtext."""
        ...
    def draw_gouraud_triangle(self, gc: GraphicsContextBase, points, colors, trans): ...
    def draw_gouraud_triangles(self, gc, points, colors, trans): ...

class _Orientation(Enum):
    def swap_if_landscape(self, shape: Tuple[float, int]) -> Tuple[float, int]: ...

class FigureCanvasPS(FigureCanvasBase):
    fixed_dpi = ...
    filetypes = ...
    def get_default_filetype(self): ...

    print_ps = ...
    print_eps = ...
    def draw(self): ...

def convert_psfrags(
    tmpfile,
    psfrags,
    font_preamble,
    custom_preamble,
    paper_width,
    paper_height,
    orientation,
): ...
def gs_distill(tmpfile, eps=..., ptype=..., bbox=..., rotated=...):  # -> None:
    """
    Use ghostscript's pswrite or epswrite device to distill a file.
    This yields smaller files without illegal encapsulated postscript
    operators. The output is low-level, converting text to outlines.
    """
    ...

def xpdf_distill(tmpfile, eps=..., ptype=..., bbox=..., rotated=...):  # -> None:
    """
    Use ghostscript's ps2pdf and xpdf's/poppler's pdftops to distill a file.
    This yields smaller files without illegal encapsulated postscript
    operators. This distiller is preferred, generating high-level postscript
    output that treats text as text.
    """
    ...

def get_bbox_header(lbrt, rotated=...):  # -> tuple[str, str]:
    """
    Return a postscript header string for the given bbox lbrt=(l, b, r, t).
    Optionally, return rotate command.
    """
    ...

def pstoeps(tmpfile, bbox=..., rotated=...):
    """
    Convert the postscript to encapsulated postscript.  The bbox of
    the eps file will be replaced with the given *bbox* argument. If
    None, original bbox will be used.
    """
    ...

FigureManagerPS = ...
psDefs = ...

class _BackendPS(_Backend):
    FigureCanvas = FigureCanvasPS
