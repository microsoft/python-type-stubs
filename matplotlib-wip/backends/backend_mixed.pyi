import datetime
import numpy as np
from typing import Any, Callable, Iterable, Literal, Sequence
from matplotlib._typing import *
from matplotlib.backend_bases import RendererBase
from matplotlib.figure import Figure

"""
This type stub file was generated by pyright.
"""
from typing import Callable, Union

class MixedModeRenderer:
    """
    A helper class to implement a renderer that switches between
    vector and raster drawing.  An example may be a PDF writer, where
    most things are drawn with PDF vector commands, but some very
    complex objects, such as quad meshes, are rasterised and then
    output as images.
    """

    def __init__(
        self,
        figure,
        width,
        height,
        dpi,
        vector_renderer,
        raster_renderer_class=...,
        bbox_inches_restore=...,
    ) -> None:
        """
        Parameters
        ----------
        figure : `Figure`
            The figure instance.
        width : scalar
            The width of the canvas in logical units
        height : scalar
            The height of the canvas in logical units
        dpi : float
            The dpi of the canvas
        vector_renderer : `RendererBase`
            An instance of a subclass of
            `~RendererBase` that will be used for the
            vector drawing.
        raster_renderer_class : `RendererBase`
            The renderer class to use for the raster drawing.  If not provided,
            this will use the Agg backend (which is currently the only viable
            option anyway.)

        """
        ...
    def __getattr__(self, attr: str) -> Union[Callable, int, bool]: ...
    def start_rasterizing(self) -> None:  # -> None:
        """
        Enter "raster" mode.  All subsequent drawing commands (until
        `stop_rasterizing` is called) will be drawn with the raster backend.
        """
        ...
    def stop_rasterizing(self) -> None:  # -> None:
        """
        Exit "raster" mode.  All of the drawing that was done since
        the last `start_rasterizing` call will be copied to the
        vector backend by calling draw_image.
        """
        ...
