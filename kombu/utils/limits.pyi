"""
This type stub file was generated by pyright.
"""

"""Token bucket implementation for rate limiting."""
class TokenBucket:
    """Token Bucket Algorithm.

    See Also:
        https://en.wikipedia.org/wiki/Token_Bucket

        Most of this code was stolen from an entry in the ASPN Python Cookbook:
        https://code.activestate.com/recipes/511490/

    Warning:
        Thread Safety: This implementation is not thread safe.
        Access to a `TokenBucket` instance should occur within the critical
        section of any multithreaded code.
    """
    fill_rate = ...
    capacity = ...
    timestamp = ...
    def __init__(self, fill_rate, capacity=...) -> None:
        ...
    
    def add(self, item):
        ...
    
    def pop(self):
        ...
    
    def clear_pending(self):
        ...
    
    def can_consume(self, tokens=...):
        """Check if one or more tokens can be consumed.

        Returns:
            bool: true if the number of tokens can be consumed
                from the bucket.  If they can be consumed, a call will also
                consume the requested number of tokens from the bucket.
                Calls will only consume `tokens` (the number requested)
                or zero tokens -- it will never consume a partial number
                of tokens.
        """
        ...
    
    def expected_time(self, tokens=...):
        """Return estimated time of token availability.

        Returns:
            float: the time in seconds.
        """
        ...
    


