"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from .log import get_logger
from .utils.objects import cached_property

"""Generic process mailbox."""
REPLY_QUEUE_EXPIRES = 10
W_PIDBOX_IN_USE = """\
A node named {node.hostname} is already using this process mailbox!

Maybe you forgot to shutdown the other node or did not do so properly?
Or if you meant to start multiple nodes on the same host please make sure
you give each node a unique node name!
"""
logger = get_logger(__name__)
class Node:
    """Mailbox node."""
    hostname = ...
    mailbox = ...
    handlers = ...
    state = ...
    channel = ...
    def __init__(self, hostname, state=..., channel=..., handlers=..., mailbox=...) -> None:
        ...
    
    def Consumer(self, channel=..., no_ack=..., accept=..., **options):
        ...
    
    def handler(self, fun):
        ...
    
    def on_decode_error(self, message, exc):
        ...
    
    def listen(self, channel=..., callback=...):
        ...
    
    def dispatch(self, method, arguments=..., reply_to=..., ticket=..., **kwargs):
        ...
    
    def handle(self, method, arguments=...):
        ...
    
    def handle_call(self, method, arguments):
        ...
    
    def handle_cast(self, method, arguments):
        ...
    
    def handle_message(self, body, message=...):
        ...
    
    dispatch_from_message = ...
    def reply(self, data, exchange, routing_key, ticket, **kwargs):
        ...
    


class Mailbox:
    """Process Mailbox."""
    node_cls = ...
    exchange_fmt = ...
    reply_exchange_fmt = ...
    namespace = ...
    connection = ...
    type = ...
    exchange = ...
    reply_exchange = ...
    accept = ...
    serializer = ...
    def __init__(self, namespace, type=..., connection=..., clock=..., accept=..., serializer=..., producer_pool=..., queue_ttl=..., queue_expires=..., reply_queue_ttl=..., reply_queue_expires=...) -> None:
        ...
    
    def __call__(self, connection):
        ...
    
    def Node(self, hostname=..., state=..., channel=..., handlers=...):
        ...
    
    def call(self, destination, command, kwargs=..., timeout=..., callback=..., channel=...):
        ...
    
    def cast(self, destination, command, kwargs=...):
        ...
    
    def abcast(self, command, kwargs=...):
        ...
    
    def multi_call(self, command, kwargs=..., timeout=..., limit=..., callback=..., channel=...):
        ...
    
    def get_reply_queue(self):
        ...
    
    @cached_property
    def reply_queue(self):
        ...
    
    def get_queue(self, hostname):
        ...
    
    @contextmanager
    def producer_or_acquire(self, producer=..., channel=...):
        ...
    
    @cached_property
    def oid(self):
        ...
    
    @cached_property
    def producer_pool(self):
        ...
    


