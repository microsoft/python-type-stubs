"""
This type stub file was generated by pyright.
"""

from . import messaging
from .entity import Queue

"""Carrot compatibility interface.

See https://pypi.org/project/carrot/ for documentation.
"""
entry_to_queue = Queue.from_dict
class Publisher(messaging.Producer):
    """Carrot compatible producer."""
    exchange = ...
    exchange_type = ...
    routing_key = ...
    durable = ...
    auto_delete = ...
    _closed = ...
    def __init__(self, connection, exchange=..., routing_key=..., exchange_type=..., durable=..., auto_delete=..., channel=..., **kwargs) -> None:
        ...
    
    def send(self, *args, **kwargs):
        ...
    
    def close(self):
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *exc_info):
        ...
    
    @property
    def backend(self):
        ...
    


class Consumer(messaging.Consumer):
    """Carrot compatible consumer."""
    queue = ...
    exchange = ...
    routing_key = ...
    exchange_type = ...
    durable = ...
    exclusive = ...
    auto_delete = ...
    _closed = ...
    def __init__(self, connection, queue=..., exchange=..., routing_key=..., exchange_type=..., durable=..., exclusive=..., auto_delete=..., **kwargs) -> None:
        ...
    
    def revive(self, channel):
        ...
    
    def close(self):
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *exc_info):
        ...
    
    def __iter__(self):
        ...
    
    def fetch(self, no_ack=..., enable_callbacks=...):
        ...
    
    def process_next(self):
        ...
    
    def discard_all(self, filterfunc=...):
        ...
    
    def iterconsume(self, limit=..., no_ack=...):
        ...
    
    def wait(self, limit=...):
        ...
    
    def iterqueue(self, limit=..., infinite=...):
        ...
    


class ConsumerSet(messaging.Consumer):
    def __init__(self, connection, from_dict=..., consumers=..., channel=..., **kwargs) -> None:
        ...
    
    def iterconsume(self, limit=..., no_ack=...):
        ...
    
    def discard_all(self):
        ...
    
    def add_consumer_from_dict(self, queue, **options):
        ...
    
    def add_consumer(self, consumer):
        ...
    
    def revive(self, channel):
        ...
    
    def close(self):
        ...
    


