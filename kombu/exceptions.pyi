"""
This type stub file was generated by pyright.
"""

"""Exceptions."""
def reraise(tp, value, tb=...):
    """Reraise exception."""
    ...

class KombuError(Exception):
    """Common subclass for all Kombu exceptions."""
    ...


class OperationalError(KombuError):
    """Recoverable message transport connection error."""
    ...


class SerializationError(KombuError):
    """Failed to serialize/deserialize content."""
    ...


class EncodeError(SerializationError):
    """Cannot encode object."""
    ...


class DecodeError(SerializationError):
    """Cannot decode object."""
    ...


class NotBoundError(KombuError):
    """Trying to call channel dependent method on unbound entity."""
    ...


class MessageStateError(KombuError):
    """The message has already been acknowledged."""
    ...


class LimitExceeded(KombuError):
    """Limit exceeded."""
    ...


class ConnectionLimitExceeded(LimitExceeded):
    """Maximum number of simultaneous connections exceeded."""
    ...


class ChannelLimitExceeded(LimitExceeded):
    """Maximum number of simultaneous channels exceeded."""
    ...


class VersionMismatch(KombuError):
    """Library dependency version mismatch."""
    ...


class SerializerNotInstalled(KombuError):
    """Support for the requested serialization type is not installed."""
    ...


class ContentDisallowed(SerializerNotInstalled):
    """Consumer does not allow this content-type."""
    ...


class InconsistencyError(Exception):
    """Data or environment has been found to be inconsistent.

    Depending on the cause it may be possible to retry the operation.
    """
    ...


class HttpError(Exception):
    """HTTP Client Error."""
    def __init__(self, code, message=..., response=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


