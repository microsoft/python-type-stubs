"""
This type stub file was generated by pyright.
"""

import sys
from typing import Iterable, Union
from .exceptions import MessageStateError

"""Message class."""
ACK_STATES = 'ACK', 'REJECTED', 'REQUEUED'
IS_PYPY = hasattr(sys, 'pypy_version_info')
class Message:
    """Base class for received messages.

    Keyword Arguments:

        channel (ChannelT): If message was received, this should be the
            channel that the message was received on.

        body (str): Message body.

        delivery_mode (bool): Set custom delivery mode.
            Defaults to :attr:`delivery_mode`.

        priority (int): Message priority, 0 to broker configured
            max priority, where higher is better.

        content_type (str): The messages content_type.  If content_type
            is set, no serialization occurs as it is assumed this is either
            a binary object, or you've done your own serialization.
            Leave blank if using built-in serialization as our library
            properly sets content_type.

        content_encoding (str): The character set in which this object
            is encoded. Use "binary" if sending in raw binary objects.
            Leave blank if using built-in serialization as our library
            properly sets content_encoding.

        properties (Dict): Message properties.

        headers (Dict): Message headers.
    """
    MessageStateError = ...
    errors = ...
    if not IS_PYPY:
        __slots__ = Union[str, Iterable[str]]
    def __init__(self, body=..., delivery_tag=..., content_type=..., content_encoding=..., delivery_info=..., properties=..., headers=..., postencode=..., accept=..., channel=..., **kwargs) -> None:
        ...
    
    def ack(self, multiple=...):
        """Acknowledge this message as being processed.

        This will remove the message from the queue.

        Raises:
            MessageStateError: If the message has already been
                acknowledged/requeued/rejected.
        """
        ...
    
    def ack_log_error(self, logger, errors, multiple=...):
        ...
    
    def reject_log_error(self, logger, errors, requeue=...):
        ...
    
    def reject(self, requeue=...):
        """Reject this message.

        The message will be discarded by the server.

        Raises:
            MessageStateError: If the message has already been
                acknowledged/requeued/rejected.
        """
        ...
    
    def requeue(self):
        """Reject this message and put it back on the queue.

        Warning:
            You must not use this method as a means of selecting messages
            to process.

        Raises:
            MessageStateError: If the message has already been
                acknowledged/requeued/rejected.
        """
        ...
    
    def decode(self):
        """Deserialize the message body.

        Returning the original python structure sent by the publisher.

        Note:
            The return value is memoized, use `_decode` to force
            re-evaluation.
        """
        ...
    
    @property
    def acknowledged(self):
        """Set to true if the message has been acknowledged."""
        ...
    
    @property
    def payload(self):
        """The decoded message body."""
        ...
    
    def __repr__(self):
        ...
    


