"""
This type stub file was generated by pyright.
"""

import os
from queue import LifoQueue as _LifoQueue

"""Generic resource pool implementation."""
class LifoQueue(_LifoQueue):
    """Last in first out version of Queue."""
    ...


class Resource:
    """Pool of resources."""
    LimitExceeded = ...
    close_after_fork = ...
    def __init__(self, limit=..., preload=..., close_after_fork=...) -> None:
        ...
    
    def setup(self):
        ...
    
    def acquire(self, block=..., timeout=...):
        """Acquire resource.

        Arguments:
            block (bool): If the limit is exceeded,
                then block until there is an available item.
            timeout (float): Timeout to wait
                if ``block`` is true.  Default is :const:`None` (forever).

        Raises:
            LimitExceeded: if block is false and the limit has been exceeded.
        """
        ...
    
    def prepare(self, resource):
        ...
    
    def close_resource(self, resource):
        ...
    
    def release_resource(self, resource):
        ...
    
    def replace(self, resource):
        """Replace existing resource with a new instance.

        This can be used in case of defective resources.
        """
        ...
    
    def release(self, resource):
        ...
    
    def collect_resource(self, resource):
        ...
    
    def force_close_all(self):
        """Close and remove all resources in the pool (also those in use).

        Used to close resources from parent processes after fork
        (e.g. sockets/connections).
        """
        ...
    
    def resize(self, limit, force=..., ignore_errors=..., reset=...):
        ...
    
    @property
    def limit(self):
        ...
    
    @limit.setter
    def limit(self, limit):
        ...
    
        


