# pyright: strict

from typing import Any, Callable, IO, List, MutableMapping, Optional, Tuple, Union

LAYOUT_BASIC: int
LAYOUT_RAQM: int

_Font = Union[str, IO[Any]]

def load(filename: str) -> ImageFont: ...

def load_path(filename: str) -> ImageFont: ...

def truetype(font: Optional[_Font], size: int = ..., index: int = ..., encoding: str = ..., layout_engine: Optional[int] = ...) -> ImageFont: ...

def load_default() -> ImageFont: ...

class ImageFont:
    def getmask(self, text: str, mode: str = ..., *args: Any, **kwargs: Any) -> Any: ... # TODO: Type core?

    def getsize(self, *args: Any, **kwargs: Any) -> Tuple[int, int]: ...

class FreeTypeFont:
    def __init__(self, font: Optional[_Font] = ..., size: int = ..., index: int = ..., encoding: str = ..., layout_engine: Optional[int] = ...) -> None: ...

    def font_variant(self, font: Optional[_Font] = ..., size: int = ..., index: int = ..., encoding: str = ..., layout_engine: Optional[int] = ...) -> FreeTypeFont: ...

    # TODO: Mapping of what?
    def get_variation_axes(self) -> List[MutableMapping[str, Any]]: ...
    def set_variation_axes(self, axes: List[MutableMapping[str, Any]]) -> None: ...

    def getmask(self, text: str, mode: str = ..., direction: Optional[str] = ..., features: Optional[List[str]] = ..., language: Optional[str] = ..., stroke_width: int = ...) -> Any: ... # TODO: Type core?
    def getmask2(self, text: str, mode: str = ..., fill: Callable = ..., direction: Optional[str] = ..., features: Optional[List[str]] = ..., language: Optional[str] = ..., stroke_width: int = ...) -> Any: ... # TODO: Type core?

    def getmetrics(self) -> Tuple[int, int]: ...

    def getname(self) -> Tuple[str, str]: ...

    def getoffset(self, text: str) -> Tuple[int, int]: ...

    def getsize(self, text: str, direction: Optional[str] = ..., features: Optional[List[str]] = ..., language: Optional[str] = ..., stroke_width: int = ...) -> Tuple[int, int]: ...
    def getsize_multiline(self, text: str, direction: Optional[str] = ..., spacing: int = ..., direction: Optional[str] = ..., features: Optional[List[str]] = ..., language: Optional[str] = ..., stroke_width: int = ...) -> Tuple[int, int]: ...

    def set_variation_by_axes(self, axes: List[Any]) -> None: ...
    def set_variation_by_name(self, name: str) -> None: ...

class TransposedFont:
    def __init__(self, font: _Font, orientation: Optional[int] = ...) -> None: ...
