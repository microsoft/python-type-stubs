# pyright: strict

from typing import Any, Optional, Protocol, Tuple, Union

from PIL.Image import Image, _Size

def autocontrast(image: Image, cutoff: int = ..., ignore: Optional[int] = ...) -> Image: ...

def colorize(image: Image, black: int, white: int, mid: Optional[int] = ..., blackpoint: int = ..., whitepoint: int = ..., midpoint: int = ...) -> Image: ...

# For color, see Image.new.
def pad(image: Image, size: _Size, method: int = ..., color: Optional[Union[str, Tuple[int, ...]]] = ..., centering: Tuple[float, float] = ...) -> Image: ...

def crop(image: Image, border: int = ...) -> Image: ...

def scale(image: Image, factor: float, resample: int = ...) -> Image: ...

class _Deformer(Protocol):
    def getmesh(self) -> Any: ...

def deform(image: Image, deformer: _Deformer, resample: int = ...) -> Image: ...

def equalize(image: Image, mask: Optional[Image] = ...) -> Image: ...

# TODO: make fill have a color type
def expand(image: Image, border: int, fill: int = ...) -> Image: ...

def fit(image: Image, size: _Size, method: int = ..., bleed: float = ..., centering: Tuple[float, float] = ...) -> Image: ...

def flip(image: Image) -> Image: ...

def grayscale(image: Image) -> Image: ...

def invert(image: Image) -> Image: ...

def mirror(image: Image) -> Image: ...

def posterize(image: Image, bits: int) -> Image: ...

def solarize(image: Image, threshold: int = ...) -> Image: ...

def exif_transpose(image: Image) -> Image: ...
