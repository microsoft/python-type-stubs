from __future__ import annotations
import datetime
import numpy as _np

from .nattype import is_null_datetimelike as is_null_datetimelike, nat_strings as nat_strings
from .dtypes import Resolution as Resolution
from .vectorized import (
    get_resolution as get_resolution,
    ints_to_pydatetime as ints_to_pydatetime,
    dt64arr_to_periodarr as dt64arr_to_periodarr,
    is_date_array_normalized as is_date_array_normalized,
    normalize_i8_timestamps as normalize_i8_timestamps)
from .tzconversion import tz_convert_from_utc_single as tz_convert_from_utc_single
from .offsets import to_offset as to_offset, SingleConstructorOffset
from .conversion import localize_pydatetime as localize_pydatetime, OutOfBoundsTimedelta as OutOfBoundsTimedelta
from .np_datetime import OutOfBoundsDatetime as OutOfBoundsDatetime
from .period import IncompatibleFrequency as IncompatibleFrequency
from .timedeltas import delta_to_nanoseconds as delta_to_nanoseconds, ints_to_pytimedelta as ints_to_pytimedelta
from .timedeltas import Timedelta as Timedelta
from .timestamps import Timestamp as Timestamp
from .period import Period as Period

from typing import Any, Mapping, Optional, Tuple, Union

_Scalar = Union[str, bytes, datetime.date, datetime.datetime, datetime.timedelta, bool, int, float, complex]

#class OutOfBoundsDatetime(OutOfBoundsDatetime): ...
class NullFrequencyError: ...
class BaseOffset: ...
class NaT: ...
NaTType = type(NaT)
iNaT: int = ...


class Interval(object):
    def __init__(self, left: _Scalar, right: _Scalar, closed: str = ...): ...
    @property
    def closed(self) -> bool: ...
    @property
    def closed_left(self) -> bool: ...
    @property
    def closed_right(self) -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def left(self) -> _Scalar: ...
    @property
    def length(self) -> _Scalar: ...
    @property
    def mid(self) -> _Scalar: ...
    @property
    def open_left(self) -> bool: ...
    @property
    def open_right(self) -> bool: ...
    @property
    def right(self) -> _Scalar: ...
    # Methods
    def overlaps(self, other: Interval) -> bool: ...




class Day(Tick): ...
class Hour(Tick): ...
class Minute(Tick): ...
class Second(Tick): ...
class Milli(Tick): ...
class Micro(Tick): ...
class Nano(Tick): ...

def delta_to_tick(delta: datetime.timedelta) -> Tick: ...

