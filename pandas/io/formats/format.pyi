import numpy as np
from pandas.core.arrays.categorical import Categorical
from pandas.core.series import Series as Series
from pandas.core.frame import DataFrame as DataFrame
from pandas._typing import FilePathOrBuffer as FilePathOrBuffer
from pandas.core.arrays.datetimes import DatetimeArray as DatetimeArray
from pandas.core.indexes.api import Index as Index
from pandas.core.indexes.datetimes import DatetimeIndex as DatetimeIndex
from pandas.core.indexes.timedeltas import TimedeltaIndex as TimedeltaIndex
from typing import Callable, Dict, IO, Iterable, List, Mapping, Optional, Sequence, Tuple, Union

formatters_type = Union[List[Callable], Tuple[Callable, ...], Mapping[Union[str, int], Callable]]
float_format_type = ...
common_docstring: str = ...
return_docstring: str = ...

class CategoricalFormatter:
    categorical = ...
    buf = ...
    na_rep = ...
    length = ...
    footer = ...
    def __init__(self, categorical: Categorical, buf: Optional[IO[str]]=..., length: bool=..., na_rep: str=..., footer: bool=...) -> None: ...
    def to_string(self) -> str: ...

class SeriesFormatter:
    series = ...
    buf = ...
    name = ...
    na_rep = ...
    header = ...
    length = ...
    index = ...
    max_rows = ...
    min_rows = ...
    float_format = ...
    dtype = ...
    adj = ...
    def __init__(self, series: Series, buf: Optional[IO[str]]=..., length: Union[bool, str]=..., header: bool=..., index: bool=..., na_rep: str=..., name: bool=..., float_format: Optional[str]=..., dtype: bool=..., max_rows: Optional[int]=..., min_rows: Optional[int]=...) -> None: ...
    def to_string(self) -> str: ...

class TextAdjustment:
    encoding = ...
    def __init__(self) -> None: ...
    def len(self, text: str) -> int: ...
    def justify(self, texts, max_len: int, mode: str=...) -> List[str]: ...
    def adjoin(self, space: int, *lists, **kwargs) -> str: ...

class EastAsianTextAdjustment(TextAdjustment):
    ambiguous_width: int = ...
    def __init__(self) -> None: ...
    def len(self, text: str) -> int: ...
    def justify(self, texts: Iterable[str], max_len: int, mode: str=...) -> List[str]: ...

class TableFormatter:
    show_dimensions: Union[bool, str]
    is_truncated: bool
    formatters: formatters_type
    columns: Index
    @property
    def should_show_dimensions(self) -> bool: ...
    def get_buffer(self, buf: Optional[FilePathOrBuffer[str]], encoding: Optional[str]=...) : ...
    def write_result(self, buf: IO[str]) -> None: ...
    def get_result(self, buf: Optional[FilePathOrBuffer[str]]=..., encoding: Optional[str]=...) -> Optional[str]: ...

class DataFrameFormatter(TableFormatter):
    __doc__ = ...
    frame = ...
    show_index_names = ...
    sparsify = ...
    float_format = ...
    formatters = ...
    na_rep = ...
    decimal = ...
    col_space = ...
    header = ...
    index = ...
    line_width = ...
    max_rows = ...
    min_rows = ...
    max_cols = ...
    max_rows_displayed = ...
    show_dimensions = ...
    table_id = ...
    render_links = ...
    justify = ...
    bold_rows = ...
    escape = ...
    columns = ...
    adj = ...
    def __init__(self, frame: DataFrame, columns: Optional[Sequence[str]]=..., col_space: Optional[Union[str, int]]=..., header: Union[bool, Sequence[str]]=..., index: bool=..., na_rep: str=..., formatters: Optional[formatters_type]=..., justify: Optional[str]=..., float_format: Optional[float_format_type]=..., sparsify: Optional[bool]=..., index_names: bool=..., line_width: Optional[int]=..., max_rows: Optional[int]=..., min_rows: Optional[int]=..., max_cols: Optional[int]=..., show_dimensions: Union[bool, str]=..., decimal: str=..., table_id: Optional[str]=..., render_links: bool=..., bold_rows: bool=..., escape: bool=...) -> None: ...
    max_cols_adj = ...
    def write_result(self, buf: IO[str]) -> None: ...
    def to_string(self, buf: Optional[FilePathOrBuffer[str]]=..., encoding: Optional[str]=...) -> Optional[str]: ...
    def to_latex(self, buf: Optional[FilePathOrBuffer[str]]=..., column_format: Optional[str]=..., longtable: bool=..., encoding: Optional[str]=..., multicolumn: bool=..., multicolumn_format: Optional[str]=..., multirow: bool=..., caption: Optional[str]=..., label: Optional[str]=...) -> Optional[str]: ...
    def to_html(self, buf: Optional[FilePathOrBuffer[str]]=..., encoding: Optional[str]=..., classes: Optional[Union[str, List, Tuple]]=..., notebook: bool=..., border: Optional[int]=...) -> Optional[str]: ...
    @property
    def has_index_names(self) -> bool: ...
    @property
    def has_column_names(self) -> bool: ...
    @property
    def show_row_idx_names(self) -> bool: ...
    @property
    def show_col_idx_names(self) -> bool: ...

def format_array(values, formatter: Optional[Callable], float_format: Optional[float_format_type]=..., na_rep: str=..., digits: Optional[int]=..., space: Optional[Union[str, int]]=..., justify: str=..., decimal: str=..., leading_space: Optional[bool]=...) -> List[str]: ...

class GenericArrayFormatter:
    values = ...
    digits = ...
    na_rep = ...
    space = ...
    formatter = ...
    float_format = ...
    justify = ...
    decimal = ...
    quoting = ...
    fixed_width = ...
    leading_space = ...
    def __init__(self, values, digits: int=..., formatter: Optional[Callable]=..., na_rep: str=..., space: Union[str, int]=..., float_format: Optional[float_format_type]=..., justify: str=..., decimal: str=..., quoting: Optional[int]=..., fixed_width: bool=..., leading_space: Optional[bool]=...) -> None: ...
    def get_result(self) -> List[str]: ...

class FloatArrayFormatter(GenericArrayFormatter):
    fixed_width: bool = ...
    formatter = ...
    float_format = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_result_as_array(self) -> np.ndarray: ...

class IntArrayFormatter(GenericArrayFormatter): ...

class Datetime64Formatter(GenericArrayFormatter):
    nat_rep = ...
    date_format = ...
    def __init__(self, values: Union[np.ndarray, Series, DatetimeIndex, DatetimeArray], nat_rep: str=..., date_format: None=..., **kwargs) -> None: ...

class ExtensionArrayFormatter(GenericArrayFormatter): ...

def format_percentiles(percentiles: Union[np.ndarray, List[Union[int, float]], List[float], List[Union[str, float]]]) -> List[str]: ...

class Datetime64TZFormatter(Datetime64Formatter): ...

class Timedelta64Formatter(GenericArrayFormatter):
    nat_rep = ...
    box = ...
    def __init__(self, values: Union[np.ndarray, TimedeltaIndex], nat_rep: str=..., box: bool=..., **kwargs) -> None: ...

class EngFormatter:
    ENG_PREFIXES = ...
    accuracy = ...
    use_eng_prefix = ...
    def __init__(self, accuracy: Optional[int]=..., use_eng_prefix: bool=...) -> None: ...
    def __call__(self, num: Union[int, float]) -> str: ...

def set_eng_float_format(accuracy: int=..., use_eng_prefix: bool=...) -> None: ...
def get_level_lengths(levels, sentinel: Union[bool, object, str]=...) -> List[Dict[int, int]]: ...
def buffer_put_lines(buf: IO[str], lines: List[str]) -> None: ...
