from pandas.io.formats.format import DataFrameFormatter as DataFrameFormatter, TableFormatter as TableFormatter
from typing import Dict, IO, Iterable, List, Optional, Tuple, Union

class HTMLFormatter(TableFormatter):
    indent_delta: int = ...
    fmt = ...
    classes = ...
    frame = ...
    columns = ...
    elements = ...
    bold_rows = ...
    escape = ...
    show_dimensions = ...
    border = ...
    table_id = ...
    render_links = ...
    def __init__(self, formatter: DataFrameFormatter, classes: Optional[Union[str, List[str], Tuple[str, ...]]]=..., border: Optional[int]=...) -> None: ...
    @property
    def show_row_idx_names(self) -> bool: ...
    @property
    def show_col_idx_names(self) -> bool: ...
    @property
    def row_levels(self) -> int: ...
    @property
    def is_truncated(self) -> bool: ...
    @property
    def ncols(self) -> int: ...
    def write(self, s, indent: int=...) -> None: ...
    def write_th(self, s, header: bool=..., indent: int=..., tags: Optional[str]=...) -> None: ...
    def write_td(self, s, indent: int=..., tags: Optional[str]=...) -> None: ...
    def write_tr(self, line: Iterable, indent: int=..., indent_delta: int=..., header: bool=..., align: Optional[str]=..., tags: Optional[Dict[int, str]]=..., nindex_levels: int=...) -> None: ...
    def render(self) -> List[str]: ...
    def write_result(self, buf: IO[str]) -> None: ...

class NotebookFormatter(HTMLFormatter):
    def write_style(self) -> None: ...
    def render(self) -> List[str]: ...
