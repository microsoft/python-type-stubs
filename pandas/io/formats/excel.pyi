from typing import Callable, Dict, List, Optional, Sequence, Union

class ExcelCell:
    __fields__ = ...
    row = ...
    col = ...
    val = ...
    style = ...
    mergestart = ...
    mergeend = ...
    def __init__(self, row: int, col: int, val, style=..., mergestart=..., mergeend=...) -> None: ...

class CSSToExcelConverter:
    inherited = ...
    def __init__(self, inherited: Optional[str]=...) -> None: ...
    compute_css = ...
    def __call__(self, declarations_str: str) -> Dict[str, Dict[str, str]]: ...
    def build_xlstyle(self, props: Dict[str, str]) -> Dict[str, Dict[str, str]]: ...
    VERTICAL_MAP = ...
    def build_alignment(self, props) -> Dict[str, Optional[Union[bool, str]]]: ...
    def build_border(self, props: Dict) -> Dict[str, Dict[str, str]]: ...
    def build_fill(self, props: Dict[str, str]) : ...
    BOLD_MAP = ...
    ITALIC_MAP = ...
    def build_font(self, props) -> Dict[str, Optional[Union[bool, int, str]]]: ...
    NAMED_COLORS = ...
    def color_to_excel(self, val: Optional[str]) : ...
    def build_number_format(self, props: Dict) -> Dict[str, Optional[str]]: ...

class ExcelFormatter:
    max_rows = ...
    max_cols = ...
    rowcounter: int = ...
    na_rep = ...
    styler = ...
    style_converter = ...
    df = ...
    columns = ...
    float_format = ...
    index = ...
    index_label = ...
    header = ...
    merge_cells = ...
    inf_rep = ...
    def __init__(self, df, na_rep: str=..., float_format: Optional[str]=..., cols: Optional[Sequence]=..., header: Union[bool, List[str]]=..., index: bool=..., index_label: Union[str, Sequence, None]=..., merge_cells: bool=..., inf_rep: str=..., style_converter: Optional[Callable]=...) -> None: ...
    @property
    def header_style(self): ...
    def get_formatted_cells(self) -> None: ...
    def write(self, writer, sheet_name: str = ..., startrow: int = ..., startcol: int = ..., freeze_panes = ..., engine = ...) -> None: ...
