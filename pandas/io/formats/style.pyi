from typing import Optional

jinja2 = ...
has_mpl: bool = ...
no_mpl_message: str = ...

class Styler:
    loader = ...
    env = ...
    template = ...
    ctx = ...
    data = ...
    index = ...
    columns = ...
    uuid = ...
    table_styles = ...
    caption = ...
    precision = ...
    table_attributes = ...
    hidden_index: bool = ...
    hidden_columns = ...
    cell_ids = ...
    na_rep = ...
    def __init__(self, data, precision=..., table_styles=..., uuid=..., caption=..., table_attributes=..., cell_ids=..., na_rep: Optional[str]=...): ...
    def to_excel(self, excel_writer, sheet_name: str = ..., na_rep: str = ..., float_format = ..., columns = ..., header: bool = ..., index: bool = ..., index_label = ..., startrow: int = ..., startcol: int = ..., engine = ..., merge_cells: bool = ..., encoding = ..., inf_rep: str = ..., verbose: bool = ..., freeze_panes = ...) -> None: ...
    def format(self, formatter, subset=..., na_rep: Optional[str]=...) : ...
    def render(self, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...
    def clear(self) -> None: ...
    def apply(self, func, axis: int = ..., subset = ..., **kwargs): ...
    def applymap(self, func, subset = ..., **kwargs): ...
    def where(self, cond, value, other = ..., subset = ..., **kwargs): ...
    def set_precision(self, precision): ...
    def set_table_attributes(self, attributes): ...
    def export(self): ...
    def use(self, styles): ...
    def set_uuid(self, uuid): ...
    def set_caption(self, caption): ...
    def set_table_styles(self, table_styles): ...
    def set_na_rep(self, na_rep: str) -> Styler: ...
    def hide_index(self): ...
    def hide_columns(self, subset): ...
    def highlight_null(self, null_color: str = ...): ...
    def background_gradient(self, cmap=..., low=..., high=..., axis=..., subset=..., text_color_threshold=..., vmin: Optional[float]=..., vmax: Optional[float]=...) : ...
    def set_properties(self, subset = ..., **kwargs): ...
    def bar(self, subset = ..., axis: int = ..., color: str = ..., width: int = ..., align: str = ..., vmin = ..., vmax = ...): ...
    def highlight_max(self, subset = ..., color: str = ..., axis: int = ...): ...
    def highlight_min(self, subset = ..., color: str = ..., axis: int = ...): ...
    @classmethod
    def from_custom_template(cls, searchpath, name): ...
    def pipe(self, func, *args, **kwargs): ...
