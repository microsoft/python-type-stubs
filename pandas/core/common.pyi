from pandas._typing import T as T
from typing import Collection, Iterable, Union

class SettingWithCopyError(ValueError): ...
class SettingWithCopyWarning(Warning): ...

def flatten(l) -> None: ...
def consensus_name_attr(objs): ...
def maybe_box(indexer, values, obj, key): ...
def maybe_box_datetimelike(value): ...

values_from_object = ...

def is_bool_indexer(key) -> bool: ...
def cast_scalar_indexer(val): ...
def not_none(*args): ...
def any_none(*args): ...
def all_none(*args): ...
def any_not_none(*args): ...
def all_not_none(*args): ...
def count_not_none(*args): ...
def try_sort(iterable): ...
def asarray_tuplesafe(values, dtype = ...): ...
def index_labels_to_array(labels, dtype = ...): ...
def maybe_make_list(obj): ...
def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]: ...
def is_null_slice(obj): ...
def is_true_slices(l): ...
def is_full_slice(obj, l): ...
def get_callable_name(obj): ...
def apply_if_callable(maybe_callable, obj, **kwargs): ...
def dict_compat(d): ...
def standardize_mapping(into): ...
def random_state(state = ...): ...
def pipe(obj, func, *args, **kwargs): ...
def get_rename_function(mapper): ...
