import numpy as np
from pandas.core.indexes.base import Index as Index
from typing import Iterable, TypeVar

_T = TypeVar("_T", str, int)

class NumericIndex(Index[_T]):
    def __new__(cls, data: Iterable = ..., dtype = ..., copy: bool = ..., name = ...) -> NumericIndex: ...
    @property
    def is_all_dates(self) -> bool: ...
    def insert(self, loc, item): ...

class IntegerIndex(NumericIndex[_T]):
    def __contains__(self, key) -> bool: ...

class Int64Index(IntegerIndex[np.int64]):
    __doc__ = ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def asi8(self) -> np.ndarray: ...

class UInt64Index(IntegerIndex[np.uint64]):
    __doc__ = ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def asi8(self) -> np.ndarray: ...

class Float64Index(NumericIndex[np.float64]):
    __doc__ = ...
    @property
    def inferred_type(self) -> str: ...
    def astype(self, dtype, copy: bool = ...): ...
    def get_value(self, series, key): ...
    def equals(self, other) -> bool: ...
    def __contains__(self, other) -> bool: ...
    def get_loc(self, key, method = ..., tolerance = ...): ...
    def is_unique(self) -> bool: ...
    def isin(self, values, level = ...): ...
