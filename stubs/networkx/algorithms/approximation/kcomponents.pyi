from collections.abc import Mapping
from functools import cached_property

from ...classes.graph import Graph

__all__ = ["k_components"]

def k_components(G: Graph, min_density: float = 0.95) -> Mapping: ...

class _AntiGraph(Graph):
    all_edge_dict: dict = ...

    def single_edge_dict(self): ...

    edge_attr_dict_factory = single_edge_dict

    def __getitem__(self, n) -> Mapping: ...
    def neighbors(self, n): ...
    @cached_property
    def adj(self): ...
    def subgraph(self, nodes): ...
    @cached_property
    def degree(self): ...
    def adjacency(self): ...
