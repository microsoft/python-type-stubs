from typing import Any, Literal

def rs_trunc(p1, x, prec):
    ...

def rs_is_puiseux(p, x) -> bool:
    ...

def rs_puiseux(f, p, x, prec) -> tuple[Any, ...]:
    ...

def rs_puiseux2(f, p, q, x, prec):
    ...

def rs_mul(p1, p2, x, prec):
    ...

def rs_square(p1, x, prec):
    ...

def rs_pow(p1, n, x, prec) -> tuple[Any, ...] | Literal[1]:
    ...

def rs_subs(p, rules, x, prec):
    ...

def rs_series_inversion(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_series_reversion(p, x, n, y):
    ...

def rs_series_from_list(p, c, x, prec, concur=...):
    ...

def rs_diff(p, x):
    ...

def rs_integrate(p, x):
    ...

def rs_fun(p, f, *args):
    ...

def mul_xin(p, i, n):
    ...

def pow_xin(p, i, n):
    ...

def rs_nth_root(p, n, x, prec) -> tuple[Any, ...] | Literal[1]:
    ...

def rs_log(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_LambertW(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_exp(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_atan(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_asin(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_tan(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_cot(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_sin(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_cos(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_cos_sin(p, x, prec) -> tuple[Any, ...] | tuple[Any, Any]:
    ...

def rs_atanh(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_sinh(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_cosh(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_tanh(p, x, prec) -> tuple[Any, ...]:
    ...

def rs_newton(p, x, prec):
    ...

def rs_hadamard_exp(p1, inverse=...):
    ...

def rs_compose_add(p1, p2):
    ...

_convert_func = ...
def rs_min_pow(expr, series_rs, a):
    ...

def rs_series(expr, a, prec):
    ...

