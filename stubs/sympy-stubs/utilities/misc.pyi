from typing import Any, Callable, TypeVar
from typing_extensions import LiteralString

_CallableT = TypeVar("_CallableT", bound=Callable)

class Undecidable(ValueError): ...

def filldedent(s, w=..., **kwargs) -> str: ...
def strlines(s, c=..., short=...) -> str | LiteralString: ...
def rawlines(s) -> str | LiteralString: ...

ARCH = ...
HASH_RANDOMIZATION = ...
_debug_tmp: list[str] = ...
_debug_iter = ...

def debug_decorator(func: _CallableT) -> _CallableT: ...
def debug(*args) -> None: ...
def debugf(string, args) -> None: ...
def find_executable(executable, path=...) -> str | None: ...
def func_name(x, short=...) -> str | Any: ...
def replace(string, *reps) -> str: ...
def translate(s, a, b=..., c=...) -> str: ...
def ordinal(num) -> str: ...
def as_int(n, strict=...) -> int: ...
