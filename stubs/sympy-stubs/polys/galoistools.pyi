from typing import Any, Literal

def gf_crt(U, M, K=...): ...
def gf_crt1(M, K) -> tuple[float, list[Any], list[Any]]: ...
def gf_crt2(U, M, p, E, S, K): ...
def gf_int(a, p): ...
def gf_degree(f) -> int: ...
def gf_LC(f, K): ...
def gf_TC(f, K): ...
def gf_strip(f): ...
def gf_trunc(f, p): ...
def gf_normal(f, p, K): ...
def gf_from_dict(f, p, K): ...
def gf_to_dict(f, p, symmetric=...) -> dict[Any, Any]: ...
def gf_from_int_poly(f, p): ...
def gf_to_int_poly(f, p, symmetric=...) -> list[Any]: ...
def gf_neg(f, p, K) -> list[Any]: ...
def gf_add_ground(f, a, p, K) -> list[Any]: ...
def gf_sub_ground(f, a, p, K) -> list[Any]: ...
def gf_mul_ground(f, a, p, K) -> list[Any]: ...
def gf_quo_ground(f, a, p, K) -> list[Any]: ...
def gf_add(f, g, p, K): ...
def gf_sub(f, g, p, K) -> list[Any]: ...
def gf_mul(f, g, p, K): ...
def gf_sqr(f, p, K): ...
def gf_add_mul(f, g, h, p, K): ...
def gf_sub_mul(f, g, h, p, K) -> list[Any]: ...
def gf_expand(F, p, K) -> list[Any]: ...
def gf_div(f, g, p, K) -> tuple[list[Any], Any]: ...
def gf_rem(f, g, p, K): ...
def gf_quo(f, g, p, K) -> list[Any]: ...
def gf_exquo(f, g, p, K) -> list[Any]: ...
def gf_lshift(f, n, K): ...
def gf_rshift(f, n, K) -> tuple[Any, list[Any]] | tuple[Any, Any]: ...
def gf_pow(f, n, p, K) -> list[Any]: ...
def gf_frobenius_monomial_base(g, p, K) -> list[Any] | list[int]: ...
def gf_frobenius_map(f, g, b, p, K) -> list[Any]: ...
def gf_pow_mod(f, n, g, p, K) -> list[Any]: ...
def gf_gcd(f, g, p, K) -> list[Any]: ...
def gf_lcm(f, g, p, K) -> list[Any]: ...
def gf_cofactors(f, g, p, K) -> tuple[list[Any], list[Any], list[Any]] | tuple[list[Any], list[Any] | Any, list[Any] | Any]: ...
def gf_gcdex(f, g, p, K) -> tuple[list[Any], list[Any], list[Any]]: ...
def gf_monic(f, p, K) -> tuple[Any, list[Any]]: ...
def gf_diff(f, p, K): ...
def gf_eval(f, a, p, K): ...
def gf_multi_eval(f, A, p, K) -> list[Any]: ...
def gf_compose(f, g, p, K) -> list[Any]: ...
def gf_compose_mod(g, h, f, p, K) -> list[Any]: ...
def gf_trace_map(a, b, c, n, f, p, K) -> tuple[list[Any] | Any, Any]: ...
def gf_random(n, p, K) -> list[Any]: ...
def gf_irreducible(n, p, K) -> list[Any]: ...
def gf_irred_p_ben_or(f, p, K) -> bool: ...
def gf_irred_p_rabin(f, p, K) -> bool: ...

_irred_methods = ...

def gf_irreducible_p(f, p, K) -> bool: ...
def gf_sqf_p(f, p, K) -> bool: ...
def gf_sqf_part(f, p, K) -> list[Any]: ...
def gf_sqf_list(f, p, K, all=...) -> tuple[Any, list[Any]]: ...
def gf_Qmatrix(f, p, K) -> list[list[Any]]: ...
def gf_Qbasis(Q, p, K) -> list[Any]: ...
def gf_berlekamp(f, p, K) -> list[Any]: ...
def gf_ddf_zassenhaus(f, p, K) -> list[Any]: ...
def gf_edf_zassenhaus(f, n, p, K) -> list[Any]: ...
def gf_ddf_shoup(f, p, K) -> list[Any]: ...
def gf_edf_shoup(f, n, p, K) -> list[Any]: ...
def gf_zassenhaus(f, p, K) -> list[Any]: ...
def gf_shoup(f, p, K) -> list[Any]: ...

_factor_methods = ...

def gf_factor_sqf(f, p, K, method=...) -> tuple[Any, list[Any]]: ...
def gf_factor(f, p, K) -> tuple[Any, list[Any]]: ...
def gf_value(f, a) -> Literal[0]: ...
def linear_congruence(a, b, m) -> list[int] | list[Any]: ...
def csolve_prime(f, p, e=...) -> list[int] | list[Any]: ...
def gf_csolve(f, n) -> list[Any]: ...
