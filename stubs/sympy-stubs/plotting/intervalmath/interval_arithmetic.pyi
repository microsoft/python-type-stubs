from types import NotImplementedType
from typing import Self

class interval:
    def __init__(self, *args, is_valid=..., **kwargs) -> None:
        ...
    
    @property
    def mid(self) -> float:
        ...
    
    @property
    def width(self) -> float:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __add__(self, other) -> interval | NotImplementedType:
        ...
    
    __radd__ = ...
    def __sub__(self, other) -> interval | NotImplementedType:
        ...
    
    def __rsub__(self, other) -> interval | NotImplementedType:
        ...
    
    def __neg__(self) -> interval:
        ...
    
    def __mul__(self, other) -> interval | NotImplementedType:
        ...
    
    __rmul__ = ...
    def __contains__(self, other) -> bool:
        ...
    
    def __rtruediv__(self, other) -> interval | NotImplementedType:
        ...
    
    def __truediv__(self, other) -> interval | NotImplementedType:
        ...
    
    def __pow__(self, other) -> Self | interval | NotImplementedType:
        ...
    
    def __rpow__(self, other) -> Self | interval | NotImplementedType:
        ...
    
    def __hash__(self) -> int:
        ...
    


