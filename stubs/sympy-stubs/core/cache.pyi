from typing import Callable

class _cache(list):
    def print_cache(self) -> None: ...
    def clear_cache(self) -> None: ...

CACHE = ...
print_cache = ...
clear_cache = ...
USE_CACHE = ...
scs = ...
if scs.lower() == "none":
    SYMPY_CACHE_SIZE = ...
else:
    SYMPY_CACHE_SIZE = ...
if USE_CACHE == "no":
    cacheit = ...
else:
    cacheit = ...

def cached_property(func) -> property: ...
def lazy_function(module: str, name: str) -> Callable:
    class LazyFunctionMeta(type): ...
    class LazyFunction(metaclass=LazyFunctionMeta): ...
