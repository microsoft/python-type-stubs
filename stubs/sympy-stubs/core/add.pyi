from typing import Any, Literal
from typing_extensions import Self, Tuple as tTuple

from sympy.core.cache import cacheit
from sympy.core.expr import Expr
from sympy.core.kind import _UndefinedKind
from sympy.core.mul import Mul
from sympy.core.numbers import Integer, Rational
from sympy.core.operations import AssocOp
from sympy.series.order import Order

_args_sortkey = ...

class Add(Expr, AssocOp):
    __slots__ = ...
    args: tTuple[Expr, ...]
    is_Add = ...
    _args_type = Expr
    @classmethod
    def flatten(cls, seq): ...
    @classmethod
    def class_key(cls) -> tuple[Literal[3], Literal[1], str]: ...
    @property
    def kind(self) -> _UndefinedKind | Any: ...
    def could_extract_minus_sign(self) -> bool: ...
    @cacheit
    def as_coeff_add(
        self, *deps
    ) -> tuple[Any | Self, tuple[Any, ...]] | tuple[Expr, tuple[Expr, ...]] | tuple[Any, tTuple[Expr, ...]]: ...
    def as_coeff_Add(self, rational=..., deps=...) -> tuple[Expr, Any | Self] | tuple[Any, Self]: ...
    def matches(self, expr, repl_dict=..., old=...): ...
    @cacheit
    def as_two_terms(self) -> tuple[Expr, Any | Self]: ...
    def as_numer_denom(
        self,
    ) -> tuple[Order, Any] | tuple[Self, Any | Add | Order | Mul] | tuple[Any | Add | Order | Mul, Any | Add | Order | Mul]: ...

    _eval_is_real = ...
    _eval_is_extended_real = ...
    _eval_is_complex = ...
    _eval_is_antihermitian = ...
    _eval_is_finite = ...
    _eval_is_hermitian = ...
    _eval_is_integer = ...
    _eval_is_rational = ...
    _eval_is_algebraic = ...
    _eval_is_commutative = ...
    def removeO(self) -> Self: ...
    def getO(self) -> Self | None: ...
    @cacheit
    def extract_leading_order(self, symbols, point=...) -> tuple[tuple[Expr, Order], ...]: ...
    def as_real_imag(self, deep=..., **hints) -> tuple[Self, Self]: ...
    def primitive(self) -> tuple[Any, Self] | tuple[Rational | Any | Integer, Any | Self]: ...
    def as_content_primitive(
        self, radical=..., clear=...
    ) -> tuple[Any | Integer | Rational, Any | Rational | Integer | Self]: ...
    def __neg__(self) -> Mul | Order: ...

add = ...
