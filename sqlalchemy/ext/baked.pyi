from typing import Any
from ..orm import strategies as strategies

log: Any = ...

class Bakery(object):
    cls: Any = ...
    cache: Any = ...
    def __init__(self, cls_, cache) -> None: ...
    def __call__(self, initial_fn, *args) -> None: ...

class BakedQuery(object):
    steps: Any = ...
    def __init__(self, bakery: Bakery, initial_fn, args: Any = ...) -> None: ...
    @classmethod
    def bakery(cls, size: int = ...) -> Bakery: ...
    def __iadd__(self, other): ...
    def __add__(self, other): ...
    def add_criteria(self, fn, *args): ...
    def with_criteria(self, fn, *args): ...
    def for_session(self, session): ...
    def __call__(self, session): ...
    def spoil(self, full: bool = ...): ...

class Result(object):
    bq: Any = ...
    session: Any = ...
    def __init__(self, bq: BakedQuery, session) -> None: ...
    def params(self, *args, **kw): ...
    def __iter__(self): ...
    def count(self): ...
    def scalar(self): ...
    def first(self): ...
    def one(self): ...
    def one_or_none(self): ...
    def all(self): ...
    def get(self, ident): ...

def bake_lazy_loaders(): ...
def unbake_lazy_loaders(): ...

class BakedLazyLoader(strategies.LazyLoader): ...

def baked_lazyload(loadopt, attr): ...
def baked_lazyload_all(*keys): ...

bakery: Bakery = ...
