from typing import Any, Optional
from ..orm import interfaces

def association_proxy(target_collection, attr, **kw): ...

ASSOCIATION_PROXY: Any = ...

class AssociationProxy(interfaces.InspectionAttrInfo):
    is_attribute: bool = ...
    extension_type: Any = ...
    target_collection: Any = ...
    value_attr: Any = ...
    creator: Any = ...
    getset_factory: Any = ...
    proxy_factory: Any = ...
    proxy_bulk_set: Any = ...
    owning_class: Any = ...
    key: Any = ...
    collection_class: Any = ...
    info: Any = ...
    def __init__(self, target_collection, attr, creator: Optional[Any] = ...,
                 getset_factory: Optional[Any] = ..., proxy_factory: Optional[Any] = ...,
                 proxy_bulk_set: Optional[Any] = ..., info: Optional[Any] = ...) -> None: ...
    @property
    def remote_attr(self): ...
    @property
    def local_attr(self): ...
    @property
    def attr(self): ...
    @property
    def target_class(self): ...
    @property
    def scalar(self): ...
    def __get__(self, obj, class_): ...
    def __set__(self, obj, values): ...
    def __delete__(self, obj): ...
    def any(self, criterion: Optional[Any] = ..., **kwargs): ...
    def has(self, criterion: Optional[Any] = ..., **kwargs): ...
    def contains(self, obj): ...
    def __eq__(self, obj): ...
    def __ne__(self, obj): ...

class _lazy_collection(object):
    ref: Any = ...
    target: Any = ...
    def __init__(self, obj, target) -> None: ...
    def __call__(self): ...

class _AssociationCollection(object):
    lazy_collection: Any = ...
    creator: Any = ...
    getter: Any = ...
    setter: Any = ...
    parent: Any = ...
    def __init__(self, lazy_collection, creator, getter, setter, parent) -> None: ...
    col: Any = ...
    def __len__(self): ...
    def __bool__(self): ...
    __nonzero__: Any = ...

# these classes are returned by AssociationProxy.__get__
class _AssociationList(_AssociationCollection):
    def __getitem__(self, index): ...
    def __setitem__(self, index, value): ...
    def __delitem__(self, index): ...
    def __contains__(self, value): ...
    def __getslice__(self, start, end): ...
    def __setslice__(self, start, end, values): ...
    def __delslice__(self, start, end): ...
    def __iter__(self): ...
    def append(self, value): ...
    def count(self, value): ...
    def extend(self, values): ...
    def insert(self, index, value): ...
    def pop(self, index: int = ...): ...
    def remove(self, value): ...
    def reverse(self): ...
    def sort(self): ...
    def clear(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __cmp__(self, other): ...
    def __add__(self, iterable): ...
    def __radd__(self, iterable): ...
    def __mul__(self, n): ...
    __rmul__: Any = ...
    def __iadd__(self, iterable): ...
    def __imul__(self, n): ...
    def copy(self): ...
    def __hash__(self): ...

class _AssociationDict(_AssociationCollection):
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __delitem__(self, key): ...
    def __contains__(self, key): ...
    def has_key(self, key): ...
    def __iter__(self): ...
    def clear(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __cmp__(self, other): ...
    def get(self, key, default: Optional[Any] = ...): ...
    def setdefault(self, key, default: Optional[Any] = ...): ...
    def keys(self): ...
    def iteritems(self): ...
    def itervalues(self): ...
    def iterkeys(self): ...
    def values(self): ...
    def items(self): ...
    def pop(self, key, default: Any = ...): ...
    def popitem(self): ...
    def update(self, *a, **kw): ...
    def copy(self): ...
    def __hash__(self): ...

class _AssociationSet(_AssociationCollection):
    def __len__(self): ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __contains__(self, value): ...
    def __iter__(self): ...
    def add(self, value): ...
    def discard(self, value): ...
    def remove(self, value): ...
    def pop(self): ...
    def update(self, other): ...
    def __ior__(self, other): ...
    def union(self, other): ...
    def __or__(self, other): ...
    def difference(self, other): ...
    def __sub__(self, other): ...
    def difference_update(self, other): ...
    def __isub__(self, other): ...
    def intersection(self, other): ...
    def __and__(self, other): ...
    def intersection_update(self, other): ...
    def __iand__(self, other): ...
    def symmetric_difference(self, other): ...
    def __xor__(self, other): ...
    def symmetric_difference_update(self, other): ...
    def __ixor__(self, other): ...
    def issubset(self, other): ...
    def issuperset(self, other): ...
    def clear(self): ...
    def copy(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __hash__(self): ...
