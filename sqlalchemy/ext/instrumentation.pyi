from typing import Any, Optional
from ..orm.instrumentation import InstrumentationFactory

INSTRUMENTATION_MANAGER: str = ...

def find_native_user_instrumentation_hook(cls): ...

instrumentation_finders: Any = ...

class ExtendedInstrumentationRegistry(InstrumentationFactory):
    def unregister(self, class_): ...
    def manager_of_class(self, cls): ...
    def state_of(self, instance): ...
    def dict_of(self, instance): ...

class InstrumentationManager(object):
    def __init__(self, class_) -> None: ...
    def manage(self, class_, manager): ...
    def dispose(self, class_, manager): ...
    def manager_getter(self, class_): ...
    def instrument_attribute(self, class_, key, inst): ...
    def post_configure_attribute(self, class_, key, inst): ...
    def install_descriptor(self, class_, key, inst): ...
    def uninstall_descriptor(self, class_, key): ...
    def install_member(self, class_, key, implementation): ...
    def uninstall_member(self, class_, key): ...
    def instrument_collection_class(self, class_, key, collection_class): ...
    def get_instance_dict(self, class_, instance): ...
    def initialize_instance_dict(self, class_, instance): ...
    def install_state(self, class_, instance, state): ...
    def remove_state(self, class_, instance): ...
    def state_getter(self, class_): ...
    def dict_getter(self, class_): ...
