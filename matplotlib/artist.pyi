from typing import Any, Callable
from ._typing import *
from .backend_bases import RendererBase, MouseEvent
from .patches import Circle, Patch, Rectangle, RegularPolygon
from .figure import Figure
from .transforms import Bbox, Transform
from .axes import Axes
from .patheffects import AbstractPathEffect

def allow_rasterization(
    draw,
): ...

class _Unset:
    def __repr__(self) -> str: ...

class Artist:

    zorder = ...
    def __init_subclass__(cls): ...
    def __init__(self) -> None: ...
    def __getstate__(self): ...
    def remove(self): ...
    def have_units(self): ...
    def convert_xunits(self, x: int) -> int: ...
    def convert_yunits(self, y: int) -> int: ...
    @property
    def axes(self) -> Axes: ...
    @axes.setter
    def axes(self, new_axes): ...
    @property
    def stale(self): ...
    @stale.setter
    def stale(self, val): ...
    def get_window_extent(self, renderer: RendererBase = ...): ...
    def get_tightbbox(self, renderer: RendererBase = ...) -> Bbox: ...
    def add_callback(self, func: Callable) -> int: ...
    def remove_callback(self, oid: int): ...
    def pchanged(self) -> None: ...
    def is_transform_set(self) -> bool: ...
    def set_transform(self, t: Transform) -> None: ...
    def get_transform(self) -> Transform: ...
    def get_children(self) -> list[Artist]: ...
    def contains(self, mouseevent: MouseEvent): ...
    def pickable(self) -> bool: ...
    def pick(self, mouseevent: MouseEvent): ...
    def set_picker(self, picker: bool) -> None: ...
    def get_picker(self) -> bool: ...
    def get_url(self) -> str: ...
    def set_url(self, url: str): ...
    def get_gid(self) -> str | None: ...
    def set_gid(self, gid: str) -> None: ...
    def get_snap(self) -> bool | None: ...
    def set_snap(self, snap: bool | None): ...
    def get_sketch_params(self) -> None | tuple[float, float, float]: ...
    def set_sketch_params(
        self, scale: float = ..., length: float = 128, randomness: float = 16
    ): ...
    def set_path_effects(self, path_effects: AbstractPathEffect): ...
    def get_path_effects(self) -> list[AbstractPathEffect]: ...
    def get_figure(self) -> Figure: ...
    def set_figure(self, fig: Figure): ...
    def set_clip_box(self, clipbox: Bbox): ...
    def set_clip_path(
        self,
        path: Circle | RegularPolygon | Rectangle,
        transform: Transform | None = ...,
    ) -> None: ...
    def get_alpha(self) -> float: ...
    def get_visible(self) -> bool: ...
    def get_animated(self) -> bool: ...
    def get_in_layout(self) -> bool: ...
    def get_clip_on(self) -> bool: ...
    def get_clip_box(self) -> Bbox: ...
    def get_clip_path(self): ...
    def get_transformed_clip_path_and_affine(self): ...
    def set_clip_on(self, b: bool) -> None: ...
    def get_rasterized(self) -> bool: ...
    def set_rasterized(self, rasterized: bool) -> None: ...
    def get_agg_filter(self) -> None | Callable: ...
    def set_agg_filter(self, filter_func: Callable): ...
    def draw(self, renderer: RendererBase): ...
    def set_alpha(self, alpha: float | None) -> None: ...
    def set_visible(self, b: bool): ...
    def set_animated(self, b: bool): ...
    def set_in_layout(self, in_layout: bool): ...
    def get_label(self) -> str: ...
    def set_label(self, s: str) -> None: ...
    def get_zorder(self) -> int: ...
    def set_zorder(self, level: float) -> None: ...
    @property
    def sticky_edges(self): ...
    def update_from(self, other: Patch) -> None: ...
    def properties(self): ...
    def update(self, props: dict) -> list: ...
    def set(self, **kwargs) -> list | None: ...
    def findobj(self, match: Callable = ..., include_self: bool = ...) -> list: ...
    def get_cursor_data(self, event: MouseEvent): ...
    def format_cursor_data(self, data) -> str: ...
    def get_mouseover(self) -> bool: ...
    def set_mouseover(self, mouseover: bool) -> None: ...
    mouseover = ...

class ArtistInspector:
    def __init__(self, o: Rectangle) -> None: ...
    def get_aliases(self): ...
    def get_valid_values(self, attr: str) -> str: ...
    def get_setters(self) -> list[str]: ...
    def is_alias(self, o): ...
    def aliased_name(self, s: str) -> str: ...
    def aliased_name_rest(self, s: str, target): ...
    def pprint_setters(self, prop: str | None = ..., leadingspace=...): ...
    def pprint_setters_rest(self, prop: str | None = ..., leadingspace=...): ...
    def properties(self) -> dict[str, Any]: ...
    def pprint_getters(self) -> list[str]: ...

def getp(obj: Artist, property: str | None = ...): ...

get = ...

def setp(obj: Artist | list, *args, file: FileLike = ..., **kwargs): ...
def kwdoc(artist: Artist) -> str: ...
def _finalize_rasterization(draw): ...
