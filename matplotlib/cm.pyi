# COMPLETE

from typing import Any, Optional, Tuple, Union

from matplotlib._typing import ArrayLike, ndarray
from matplotlib.colorbar import Colorbar
from matplotlib.colors import Colormap, Normalize


class ScalarMappable:
    colorbar: Optional[Colorbar]

    def __init__(self, norm: Optional[Normalize] = ..., cmap: Optional[Union[str, Colormap]] = ...) -> None: ...

    def autoscale(self) -> None: ...

    def autoscale_None(self) -> None: ...

    def changed(self) -> None: ...

    def get_alpha(self) -> float: ...

    def get_array(self) -> ndarray: ...
    def set_array(self, A: ndarray) -> None: ...

    def get_clim(self) -> Tuple[float, float]: ...
    def set_clim(self, vmin: Optional[float] = ..., vmax: Optional[float] = ...) -> None: ...

    def get_cmap(self) -> Colormap: ...
    def set_cmap(self, cmap: Optional[Union[str, Colormap]]) -> None: ...
    
    def set_norm(self, norm: Optional[Normalize]) -> None: ...

    def to_rgba(self, x: ArrayLike, alpha: Optional[float] = ..., bytes: bool = ..., norm: bool = ...) -> ndarray: ...

    def add_checkler(self, checker: Any) -> None: ... # deprecated
    def check_update(self, checker: Any) -> None: ... # deprecated


def get_cmap(name: Optional[Union[Colormap, str]] = ..., lut: Optional[int] = ...) -> Colormap: ...

def register_cmap(name: Optional[str] = ..., cmap: Optional[Colormap] = ..., data: Any = ..., lut: Optional[int] = ...) -> None: ...

def revcmap(data: Any) -> Any: ... # deprecated
