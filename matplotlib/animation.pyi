from typing import Callable, Iterable
from .figure import Figure

from itertools import count
from typing import Callable, Dict, List, Tuple

import abc
import contextlib

subprocess_creation_flags = ...

def adjusted_figsize(w: float, h: float, dpi: float, n: int) -> tuple[float, float]: ...

class MovieWriterRegistry:
    def __init__(self) -> None: ...
    def register(self, name: str) -> Callable: ...
    def is_available(self, name: str) -> bool: ...
    def __iter__(self): ...
    def list(self) -> list[MovieWriter]: ...
    def __getitem__(self, name) -> MovieWriter: ...

writers = ...

class AbstractMovieWriter(abc.ABC):
    def __init__(
        self,
        fps: int = ...,
        metadata: Dict[str, str] = ...,
        codec=...,
        bitrate=...,
    ) -> None: ...
    @abc.abstractmethod
    def setup(self, fig: Figure, outfile: str, dpi: float = ...): ...
    @property
    def frame_size(self) -> Tuple[int, int]: ...
    @abc.abstractmethod
    def grab_frame(self, **savefig_kwargs): ...
    @abc.abstractmethod
    def finish(self): ...
    @contextlib.contextmanager
    def saving(self, fig: Figure, outfile, dpi, *args, **kwargs): ...

class MovieWriter(AbstractMovieWriter):

    frame_format: str
    fig: Figure

    supported_formats = ...
    def __init__(
        self,
        fps: int = ...,
        codec: str | None = ...,
        bitrate: int = ...,
        extra_args: list[str] | None = ...,
        metadata: Dict[str, str] = ...,
    ) -> None: ...
    def setup(self, fig: Figure, outfile: str, dpi: float = ...): ...
    def finish(self): ...
    def grab_frame(self, **savefig_kwargs): ...
    @classmethod
    def bin_path(cls) -> str: ...
    @classmethod
    def isAvailable(cls) -> bool: ...

class FileMovieWriter(MovieWriter):
    def __init__(self, *args, **kwargs) -> None: ...
    def setup(
        self, fig: Figure, outfile: str, dpi: float = ..., frame_prefix: str = ...
    ): ...
    def __del__(self): ...
    @property
    def frame_format(self): ...
    @frame_format.setter
    def frame_format(self, frame_format): ...
    def grab_frame(self, **savefig_kwargs): ...
    def finish(self): ...

class PillowWriter(AbstractMovieWriter):
    @classmethod
    def isAvailable(cls): ...
    def setup(self, fig: Figure, outfile: str, dpi: float = ...): ...
    def grab_frame(self, **savefig_kwargs): ...
    def finish(self): ...

class FFMpegBase:
    @property
    def output_args(self) -> list[str]: ...

class FFMpegWriter(FFMpegBase, MovieWriter): ...

class FFMpegFileWriter(FFMpegBase, FileMovieWriter):

    supported_formats = ...

class ImageMagickBase:
    @property
    def delay(self): ...
    @property
    def output_args(self): ...
    @classmethod
    def bin_path(cls): ...
    @classmethod
    def isAvailable(cls): ...

class ImageMagickWriter(ImageMagickBase, MovieWriter):

    input_names = ...

class ImageMagickFileWriter(ImageMagickBase, FileMovieWriter):

    supported_formats = ...
    input_names = ...

class HTMLWriter(FileMovieWriter):

    supported_formats = ...
    @classmethod
    def isAvailable(cls): ...
    def __init__(
        self,
        fps=...,
        codec=...,
        bitrate=...,
        extra_args=...,
        metadata=...,
        embed_frames=...,
        default_mode=...,
        embed_limit=...,
    ) -> None: ...
    def setup(self, fig: Figure, outfile: str, dpi: float, frame_dir=...): ...
    def grab_frame(self, **savefig_kwargs): ...
    def finish(self): ...

class Animation:
    def __init__(
        self, fig: Figure, event_source: object = ..., blit: bool = ...
    ) -> None: ...
    def __del__(self): ...
    def save(
        self,
        filename: str,
        writer: MovieWriter | str = ...,
        fps: int = ...,
        dpi: float = ...,
        codec: str = ...,
        bitrate: int = ...,
        extra_args: list[str] | None = ...,
        metadata: dict[str, str] = ...,
        extra_anim: list = ...,
        savefig_kwargs: dict = ...,
        *,
        progress_callback: Callable = ...
    ): ...
    def new_frame_seq(self): ...
    def new_saved_frame_seq(self): ...
    def to_html5_video(self, embed_limit: float = ...) -> str: ...
    def to_jshtml(
        self, fps: int = ..., embed_frames: bool = ..., default_mode: str = ...
    ): ...
    def pause(self): ...
    def resume(self): ...

class TimedAnimation(Animation):
    def __init__(
        self,
        fig: Figure,
        interval: int = ...,
        repeat_delay: int = ...,
        repeat: bool = ...,
        event_source=...,
        *args,
        **kwargs
    ) -> None: ...

class ArtistAnimation(TimedAnimation):
    def __init__(self, fig: Figure, artists: list, *args, **kwargs) -> None: ...

class FuncAnimation(TimedAnimation):
    def __init__(
        self,
        fig: Figure,
        func: Callable,
        frames: Callable | Iterable | int | None = ...,
        init_func: Callable = ...,
        fargs: tuple | None = ...,
        save_count: int = ...,
        *,
        cache_frame_data: bool = ...,
        **kwargs
    ) -> None: ...
    def new_frame_seq(self) -> count: ...
    def new_saved_frame_seq(self): ...
