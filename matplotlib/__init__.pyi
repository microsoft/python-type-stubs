# COMPLETE

from typing import Any, AnyStr, ContextManager, Dict, Literal, Mapping, MutableMapping, Optional, Pattern, Sequence, Union
import .colors as colors

def use(backend: str, warn: bool = ..., force: bool = ...) -> None: ...

def get_backend() -> str: ...

rcParams: RcParams

def rc_context(rc: Optional[Mapping[Any, Any]] = ..., fname: Optional[str] = ...) -> ContextManager[None]: ...

def rc(group: Union[str, Sequence[str]], **kwargs: Any) -> None: ...

def rc_file(fname: str, *, use_default_template: bool = ...) -> None: ...

def rcdefaults() -> None: ...

def rc_file_defaults() -> None: ...

# TODO: Str -> Any?
class RcParams(MutableMapping[Any, Any]):
    validate: Dict[str, Any]

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def copy(self) -> Dict[Any, Any]: ...
    def find_all(self, pattern: Union[AnyStr, Pattern[AnyStr]]) -> RcParams: ...


def rc_params(fail_on_error: bool = ...) -> RcParams: ...

def rc_params_from_file(fname: str, fail_on_error: bool = ..., use_default_template: bool = ...) -> RcParams: ...

def matplotlib_fname() -> str: ...

def interactive(b: bool) -> None: ...

def is_interactive() -> bool: ...

def set_loglevel(level: Literal["notset", "debug", "info", "warning", "error", "critical"]) -> None: ...

def get_configdir() -> str: ...
def get_cachedir() -> str: ...
