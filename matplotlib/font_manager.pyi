# COMPLETE

import sys
from pathlib import Path
from typing import Any, Dict, Iterable, List, Literal, Optional, Tuple, Union

from _typeshed import AnyPath

from matplotlib.afm import AFM
from matplotlib.ft2font import FT2Font

_Style = Literal['normal', 'italic', 'oblique']

_Variant = Literal['normal', 'small-caps']

_Weight = Literal[
    'ultralight',
    'light',
    'normal',
    'regular',
    'book',
    'medium',
    'roman',
    'semibold',
    'demibold',
    'demi',
    'bold',
    'heavy',
    'extra bold',
    'black'
]

_Stretch = Literal[
    'ultra-condensed',
    'extra-condensed',
    'condensed',
    'semi-condensed',
    'normal',
    'semi-expanded',
    'expanded',
    'extra-expanded',
    'ultra-expanded'
]

_Size = Literal[
    'xx-small',
    'x-small',
    'small',
    'medium',
    'large',
    'x-large',
    'xx-large'
]

class FontEntry:
    fname: AnyPath
    name: str
    style: _Style
    variant: _Variant
    weight: Union[_Weight, int]
    stretch: Union[_Stretch, int]
    size: Union[_Size, float]

    def __init__(
        self,
        fname: AnyPath = ...,
        name: str = ...,
        style: _Style = ...,
        variant: _Variant = ...,
        weight: Union[_Weight, int] = ...,
        stretch: Union[_Stretch, int] = ...,
        size: Union[_Size, float] = ...
    ) -> None: ...


class FontManager:
    def __init__(self, size: Optional[int] = ..., weight: Literal["normal", "bold"] = ...) -> None: ...

    def addfont(self, path: Union[str, Path]) -> None: ...
    def findfont(
        self,
        prop: Union[str, FontProperties],
        fontext: Literal['ttf', 'afm'] = ...,
        directory: Optional[str] = ...,
        fallback_to_default: bool = ...,
        rebuild_if_missing: bool = ...
    ) -> str: ...

    @staticmethod
    def get_default_size() -> int: ...

    def get_default_weight(self) -> Literal['normal', 'bold']: ...
    def set_default_weight(self, weight: Literal['normal', 'bold']) -> None: ...
    
    def score_family(self, families: Union[List[str], Tuple[str], str], family2: str) -> float: ...
    def score_size(self, size1: Any, size2: Any) -> float: ...
    def score_stretch(self, stretch1: Any, stretch2: Any) -> float: ...
    def score_style(self, style1: Any, style2: Any) -> float: ...
    def score_variant(self, variant1: Any, variant2: Any) -> float: ...
    def score_weight(self, weight1: _Weight, weight2: _Weight) -> float: ...

    @property
    def defaultFont(self) -> Dict[str, str]: ...


class FontProperties:
    def __init__(
        self,
        family: Optional[str] = ...,
        style: Optional[_Style] = ...,
        variant: Optional[_Variant] = ...,
        weight: Optional[Union[_Weight, int]] = ...,
        stretch: Optional[Union[_Stretch, int]] = ...,
        size: Union[_Size, int] = ...,
        fname: Optional[AnyPath] = ...
    ) -> None: ...

    def copy(self) -> FontProperties: ...

    def get_family(self) -> List[str]: ...
    def set_family(self, family: Union[str, List[str]]) -> None: ...
    def get_file(self) -> Optional[AnyPath]: ...
    def set_file(self, file: Optional[AnyPath]) -> None: ...
    def get_fontconfig_pattern(self) -> Dict[str, List[str]]: ...
    def set_fontconfig_pattern(self, pattern: str) -> None: ...
    def get_name(self) -> str: ...
    def set_name(self, family: Union[str, List[str]]) -> None: ...
    def get_size(self) -> float: ...
    def get_size_in_points(self)-> float: ...
    def set_size(self, size: Optional[Union[float, _Size]]) -> None: ...
    def get_slant(self) -> _Style: ...
    def set_slant(self, style: _Style) -> None: ...
    def get_stretch(self) -> Union[int, _Stretch]: ...
    def set_stretch(self, stretch: Optional[Union[int, _Stretch]]) -> None: ...
    def get_style(self) -> _Style: ...
    def set_style(self, style: _Style) -> None: ...
    def get_variant(self) -> _Variant: ...
    def set_variant(self, variant: Optional[_Variant]) -> None: ...
    def get_weight(self) -> Union[int, _Weight]: ...
    def set_weight(self, weight: Optional[Union[int, _Weight]]) -> None: ...

def afmFontProperty(fontpath: AnyPath, font: AFM) -> FontEntry: ...
def findSystemFonts(fontpaths: Optional[Union[str, Iterable[AnyPath]]] = ..., fontext: str = ...) -> List[str]: ...


# FontManager.findfont
def findfont(
    prop: Union[str, FontProperties],
    fontext: Literal['ttf', 'afm'] = ...,
    directory: Optional[str] = ...,
    fallback_to_default: bool = ...,
    rebuild_if_missing: bool = ...
) -> str: ...

def get_font(filename: AnyPath, hinting_factor: Optional[int] = ...) -> FT2Font: ...
def get_fontconfig_fonts(fontext: str = ...) -> List[str]: ...
def get_fontext_synonyms(fontext: str) -> str: ...
def is_opentype_cff_font(filename: str) -> bool: ...
def json_dump(data: FontManager, filename: AnyPath) -> None: ...
def json_load(filename: AnyPath) -> FontManager: ...
def list_fonts(directory: AnyPath, extensions: Iterable[str]) -> List[str]: ...
def ttfFontProperty(font: FT2Font) -> FontEntry: ...

if sys.platform == 'win32':
    def win32FontDirectory() -> str: ...
    def win32InstalledFonts(directory: Optional[str] = ..., fontext: Literal['ttf', 'afm'] = ...) -> List[str]: ...
