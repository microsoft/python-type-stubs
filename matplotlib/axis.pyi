from datetime import tzinfo
from typing import Any, Dict, Iterable, List, Literal, Optional, Union

from matplotlib._typing import ndarray
from matplotlib.artist import Artist
from matplotlib.axes import Axes
from matplotlib.cbook import CallbackRegistry
from matplotlib.lines import Line2D
from matplotlib.text import Text
from matplotlib.ticker import Formatter, Locator
from matplotlib.transforms import Transform


class Axis(Artist):
    isDefault_label: bool
    axes: Axes
    major: Ticker
    minor: Ticker
    callbacks: CallbackRegistry
    label: Text
    labelpad: float
    offsetText: Text
    pickradius: float
    majorTicks: List[Tick]
    minorTicks: List[Tick]

    def __init__(self, axes: Axes, pickradius: float = ...) -> None: ...

    def get_remove_overlapping_locs(self) -> bool: ...
    def set_remove_overlapping_locs(self, val: Any) -> None: ...

    @property
    def remove_overlapping_locs(self) -> bool: ...
    @remove_overlapping_locs.setter
    def remove_overlapping_locs(self, val: Any) -> None: ...

    def set_label_coords(self, x: float, y: float, transform: Optional[Transform] = ...) -> None: ...
    def get_transform(self) -> Transform: ...
    def get_scale(self) -> str: ...
    def limit_range_for_scale(self, vmin, vmax): ...
    def get_children(self) -> List[Artist]: ...
    def clear(self) -> None: ...
    def cla(self) -> None: ...
    def reset_ticks(self) -> None: ...
    def set_tick_params(self, which='major', reset=..., **kw: Any): ...
    def set_clip_path(self, clippath, transform=...): ...
    def get_view_interval(self): ...
    def set_view_interval(self, vmin, vmax, ignore=...): ...
    def get_data_interval(self): ...
    def set_data_interval(self, vmin, vmax, ignore=...): ...
    def get_inverted(self): ...
    def set_inverted(self, inverted): ...
    def set_default_intervals(self): ...
    def get_ticklabel_extents(self, renderer): ...
    def get_tightbbox(self, renderer, *, for_layout_only=...): ...
    def get_tick_padding(self): ...
    def draw(self, renderer, *args: Any, **kwargs: Any): ...
    def get_gridlines(self): ...
    def get_label(self) -> Text: ...
    def get_offset_text(self) -> Text: ...
    def get_pickradius(self) -> float: ...
    def get_majorticklabels(self) -> List[Text]: ...
    def get_minorticklabels(self) -> List[Text]: ...
    def get_ticklabels(self, minor: bool = ..., which: Optional[Literal['minor', 'major', 'both']] = ...) -> List[Text]: ...
    def get_majorticklines(self) -> List[Line2D]: ...
    def get_minorticklines(self) -> List[Line2D]: ...
    def get_ticklines(self, minor: bool = ...) -> List[Line2D]: ...
    def get_majorticklocs(self): ...
    def get_minorticklocs(self): ...
    def get_ticklocs(self, minor=...): ...
    def get_ticks_direction(self, minor: bool = ...) -> ndarray: ...
    def get_label_text(self): ...
    def get_major_locator(self): ...
    def get_minor_locator(self): ...
    def get_major_formatter(self): ...
    def get_minor_formatter(self): ...
    def get_major_ticks(self, numticks=...): ...
    def get_minor_ticks(self, numticks=...): ...
    def grid(self, b=..., which=..., **kwargs: Any): ...
    def update_units(self, data): ...
    def have_units(self) -> bool: ...
    def convert_units(self, x): ...
    def set_units(self, u): ...
    def get_units(self): ...
    def set_label_text(self, label: str, fontdict: Optional[Dict[str, Any]], **kwargs: Any): ...
    def set_major_formatter(self, formatter: Formatter) -> None: ...
    def set_minor_formatter(self, formatter: Formatter) -> None: ...
    def set_major_locator(self, locator: Locator) -> None:  ...
    def set_minor_locator(self, locator: Locator) -> None:  ...
    def set_pickradius(self, pickradius: float) -> None: ...
    def set_ticklabels(self, ticklabels: Iterable[Union[str, Text]], *, minor: bool = ..., **kwargs: Any) -> None: ...
    def set_ticks(self, ticks: Iterable[float], *, minor: bool = ...) -> None: ...
    def pan(self, numsteps) -> None: ...
    def zoom(self, direction) -> None: ...
    def axis_date(self, tz: Optional[Union[str, tzinfo]]) -> None: ...
    def get_tick_space(self): ...
    def get_label_position(self): ...
    def set_label_position(self, position: Literal['top', 'bottom']): ...
    def get_minpos(self): ...

    def __getattr__(self, name: str) -> Any: ...  # incomplete


class XAxis(Axis):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: str) -> Any: ...  # incomplete

class YAxis(Axis):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: str) -> Any: ...  # incomplete


class Ticker:
    def __init__(self) -> None: ...

    @property
    def locator(self) -> Locator: ...
    @locator.setter
    def locator(self, locator: Locator) -> None: ...

    @property
    def formatter(self) -> Formatter: ...
    @formatter.setter
    def formatter(self, formatter: Formatter) -> None: ...

class Tick(Artist):
    def __getattr__(self, name: str) -> Any: ...  # incomplete

class XTick(Tick):
    def __getattr__(self, name: str) -> Any: ...  # incomplete

class YTick(Tick):
    def __getattr__(self, name: str) -> Any: ...  # incomplete
