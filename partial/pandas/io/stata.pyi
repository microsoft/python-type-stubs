import datetime
from collections import abc
from pandas._typing import FilePathOrBuffer as FilePathOrBuffer
from pandas.core.frame import DataFrame as DataFrame
from typing import Dict, Hashable, Optional, Sequence

def read_stata(
    path: FilePathOrBuffer,
    convert_dates: bool = ...,
    convert_categoricals: bool = ...,
    index_col: Optional[str] = ...,
    convert_missing: bool = ...,
    preserve_dtypes: bool = ...,
    columns: Optional[Sequence[str]] = ...,
    order_categoricals: bool = ...,
    chunksize: Optional[int] = ...,
    iterator: bool = ...,
) -> DataFrame: ...

stata_epoch = ...
excessive_string_length_error: str

class PossiblePrecisionLoss(Warning): ...

precision_loss_doc: str

class ValueLabelTypeMismatch(Warning): ...

value_label_mismatch_doc: str

class InvalidColumnName(Warning): ...

invalid_name_doc: str

class StataValueLabel:
    labname = ...
    value_labels = ...
    text_len = ...
    off = ...
    val = ...
    txt = ...
    n: int = ...
    len = ...
    def __init__(self, catarray, encoding: str = ...): ...
    def generate_value_label(self, byteorder): ...

class StataMissingValue:
    MISSING_VALUES = ...
    bases = ...
    float32_base: bytes = ...
    increment = ...
    value = ...
    int_value = ...
    float64_base: bytes = ...
    BASE_MISSING_VALUES = ...
    def __init__(self, value) -> None: ...
    string = ...
    def __eq__(self, other) -> bool: ...
    @classmethod
    def get_base_missing_value(cls, dtype): ...

class StataParser:
    DTYPE_MAP = ...
    DTYPE_MAP_XML = ...
    TYPE_MAP = ...
    TYPE_MAP_XML = ...
    VALID_RANGE = ...
    OLD_TYPE_MAPPING = ...
    MISSING_VALUES = ...
    NUMPY_TYPE_MAP = ...
    RESERVED_WORDS = ...
    def __init__(self) -> None: ...

class StataReader(StataParser, abc.Iterator):
    col_sizes = ...
    path_or_buf = ...
    def __init__(
        self,
        path_or_buf,
        convert_dates: bool = ...,
        convert_categoricals: bool = ...,
        index_col=...,
        convert_missing: bool = ...,
        preserve_dtypes: bool = ...,
        columns=...,
        order_categoricals: bool = ...,
        chunksize=...,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def close(self) -> None: ...
    def __next__(self): ...
    def get_chunk(self, size=...): ...
    def read(
        self,
        nrows=...,
        convert_dates=...,
        convert_categoricals=...,
        index_col=...,
        convert_missing=...,
        preserve_dtypes=...,
        columns=...,
        order_categoricals=...,
    ): ...
    @property
    def data_label(self): ...
    def variable_labels(self): ...
    def value_labels(self): ...

class StataWriter(StataParser):
    type_converters = ...
    def __init__(
        self,
        fname,
        data,
        convert_dates=...,
        write_index: bool = ...,
        byteorder=...,
        time_stamp=...,
        data_label=...,
        variable_labels=...,
    ) -> None: ...
    def write_file(self) -> None: ...

class StataStrLWriter:
    df = ...
    columns = ...
    def __init__(self, df, columns, version: int = ..., byteorder=...) -> None: ...
    def generate_table(self): ...
    def generate_blob(self, gso_table): ...

class StataWriter117(StataWriter):
    def __init__(
        self,
        fname,
        data,
        convert_dates=...,
        write_index: bool = ...,
        byteorder=...,
        time_stamp=...,
        data_label=...,
        variable_labels=...,
        convert_strl=...,
    ) -> None: ...

class StataWriterUTF8(StataWriter117):
    def __init__(
        self,
        fname: FilePathOrBuffer,
        data: DataFrame,
        convert_dates: Optional[Dict[Hashable, str]] = ...,
        write_index: bool = ...,
        byteorder: Optional[str] = ...,
        time_stamp: Optional[datetime.datetime] = ...,
        data_label: Optional[str] = ...,
        variable_labels: Optional[Dict[Hashable, str]] = ...,
        convert_strl: Optional[Sequence[Hashable]] = ...,
        version: Optional[int] = ...,
    ) -> None: ...
